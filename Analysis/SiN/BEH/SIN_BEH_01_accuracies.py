# -*- coding: utf-8 -*-
""" Label EEG epochs
===============================================
Created on Tue Apr 25 10:56:48 2023
- Label epochs as correct vs incorrect for two class classification
- Read trial info from Psychopy .csv file logging experiment performance
- Use start of the block as anchor event

Created on Thu Jun 15 08:54:39 2023
@author: gfraga
"""
import os 
import shutil
import pandas as pd 
import json 

# User inputs
copyraw = 0;
subID = 'p004'
taskID = 'task-sin'

# PATHS
thisDir = os.path.dirname(os.path.abspath(__file__))
rawdir = os.path.join(thisDir[:thisDir.find('scripts')] + 'Data','SiN','rawdata', subID,taskID,'beh')
rawdir_eeg = os.path.join(thisDir[:thisDir.find('scripts')] + 'Data','SiN','rawdata', subID,taskID,'eeg')
#
diroutput = os.path.join(thisDir[:thisDir.find('scripts')] + 'Data','SiN','derivatives',subID,taskID,'beh')
os.makedirs(diroutput, exist_ok=True);

# %% Copy raw data into the analysis folder 
if copyraw == 1:
    rawfiles = os.listdir(rawdir)
    # Loop through the files to find the CSV file
    for file in rawfiles:
        if file.endswith(".csv") and file[-5].isdigit():
            # If the file is a CSV file, copy it to the output directory
            filepath = os.path.join(rawdir, file)
            outputpath = os.path.join(diroutput, file)
            
            shutil.copyfile(filepath, outputpath)
            print(['saved ' + outputpath])

# %% Read and summary from Analysis folder 
files = os.listdir(diroutput)

# Loop through the files to find the CSV file
for file in files:
    if file.endswith(".csv") and file[-5].isdigit():  #do not the one ending in *trials.csv 
        #% read data frame 
        filepath = os.path.join(diroutput, file)         
        df = pd.read_csv(filepath, header = 0)                   
        
        # Exclude last row if the number of rows is more than 388
        if len(df) > 388:
            df = df.iloc[:-1]
        if len(df) > 388:
            raise ValueError("The number of rows exceeds 388. Script terminated.")

        #% 
        df['callSignCorrect'] = pd.to_numeric(df['callSignCorrect'].map({'True': 1, 'False': 0, "NO_ANSW":''}))
        df['colourCorrect'] =  pd.to_numeric(df['colourCorrect'].map({'True': 1, 'False': 0, "NO_ANSW": ''}))
        df['numberCorrect'] =  pd.to_numeric(df['numberCorrect'].map({'True': 1, 'False': 0, "NO_ANSW": ''}))
        
        correctness = pd.melt(df[['noise','block','levels','callSignCorrect','colourCorrect','numberCorrect']],id_vars=['noise','block','levels'])
        correctness = correctness[~correctness.noise.isna()] # remove files for the example trials         
  

# %% Summarize accuracy
# ----------------------------------------------------------------------------------------   
# call or callSign  = is the animal ; col = color and num = number 
# 32 = is the number of target items per level, noise type and block (replace by infering this from data) 
    
uniqueTrials = 32     
result = (df.groupby(['noise', 'block', 'levels'])[['callSignCorrect', 'colourCorrect', 'numberCorrect']].sum()) * 100 / uniqueTrials
result = result.reset_index()

# %%  Read events from eeg file and add accuracy information to each target 


eventsfile = os.path.join(rawdir_eeg,[f for f in os.listdir(rawdir_eeg) if f.endswith("events.tsv")][0])
events = pd.read_csv(eventsfile,delimiter='\t')

# % Fill in responses 
# for first target (call sign)
value_list = ['111','112','113','114','211','212','213','214']
for i,idx in enumerate(events.loc[events['VALUE'].isin(value_list)].index):
    print(i)
    events.loc[idx, 'RESPONSE'] = correctness.value[correctness['variable'] == 'callSignCorrect'].iloc[i]
    
# for second target (color)
value_list = ['121','122','123','124','221','222','223','224']
for i,idx in enumerate(events.loc[events['VALUE'].isin(value_list)].index):
    events.loc[idx, 'RESPONSE'] = correctness.value[correctness['variable'] == 'colourCorrect'].iloc[i]

# for third target (number)
value_list = ['131','132','133','134','231','232','233','234']
for i,idx in enumerate(events.loc[events['VALUE'].isin(value_list)].index):
    events.loc[idx, 'RESPONSE'] = correctness.value[correctness['variable'] == 'numberCorrect'].iloc[i]




# %% SAVING OUTPUTS 
   
# Save table 

outputname_accu =  subID + '_accu.csv'
result.to_csv(os.path.join(diroutput,outputname_accu))

outputname_trials =   subID + '_accu_trialsLong.csv'
correctness.to_csv(os.path.join(diroutput,outputname_trials), index= False)
        
# Save events with additional coding of accuracy
outputname_events =   subID + '_events_accuracy.csv'
events.to_csv(os.path.join(diroutput, outputname_events ), index= False)
 

# %% Metadata 
metaData = {       
      file: "raw task log (generated by PsychoPy)",
      outputname_accu: "summary of accuracy as % correct over all trials ", 
      outputname_trials: "long-formated accuracy as % correct for each trial type (empty  = missing response) ",
      outputname_events: "copy of EEG event file with accuracy information added in the target onsets in 'RESPONSE' column"
    }

with open(os.path.join(diroutput, 'info.json'), 'w') as ff:
    json.dump(metaData, ff, indent=2)
    print('---> saved README file')




# %%-------------------------------------------------     
# Some old code that got accuracy from other columns        
# #    #-Checking accuracy will change as future log files will have 3 boolean columns for each target item 
# #    # % Assess accuracy     
#     map_call = {'Ad':'call1','Dr':'call2','Kr':'call3','Ti':'call4'}
#     map_col = {'ge':'colour1','gr':'colour2','ro':'colour3','we':'colour4'}
#     map_num = {'Ei':'number1','Zw':'number2','Dr':'number3','Vi':'number4'}
   

      
#  #    # compare response with presented stimuli
# tester = df.copy().iloc[4:]

# #    # Fix formatting issues, subject response values are coded as "['call1']"
# tester['mouseClickOnCall.clicked_name'] = tester['mouseClickOnCall.clicked_name'].apply(lambda x:       x.replace('[\'', '').replace('\']', ''))
# tester['mouseClickOnColour.clicked_name'] = tester['mouseClickOnColour.clicked_name'].apply(lambda x: x.replace('[\'', '').replace('\']', ''))
# tester['mouseClickOnNumber.clicked_name'] = tester['mouseClickOnNumber.clicked_name'].apply(lambda x: x.replace('[\'', '').replace('\']', ''))   
    
# tester.insert(0, 'accu_call', (tester['mouseClickOnCall.clicked_name'] == tester.callSign.replace(map_call)).astype(int))
# tester.insert(0, 'accu_col', (tester['mouseClickOnColour.clicked_name'] == tester.colour.replace(map_col)).astype(int))
# tester.insert(0, 'accu_num', (tester['mouseClickOnNumber.clicked_name'] == tester.number.replace(map_num)).astype(int))
# #  
