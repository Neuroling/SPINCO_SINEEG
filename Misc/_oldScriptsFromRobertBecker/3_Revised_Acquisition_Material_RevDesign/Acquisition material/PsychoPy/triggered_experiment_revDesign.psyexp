<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2021.2.3">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data file delimiter" updates="None" val="auto" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'participant': '1', 'session': '001'}" valType="code"/>
    <Param name="Force stereo" updates="None" val="False" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="HTML path" updates="None" val="" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Resources" updates="None" val="[]" valType="fileList"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save hdf5 file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="height" valType="str"/>
    <Param name="Use version" updates="None" val="2021.2.3" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="[1280, 720]" valType="code"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="$[0,0,0]" valType="str"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="elAddress" updates="None" val="100.1.1.1" valType="str"/>
    <Param name="elDataFiltering" updates="None" val="FILTER_LEVEL_2" valType="str"/>
    <Param name="elLiveFiltering" updates="None" val="FILTER_LEVEL_OFF" valType="str"/>
    <Param name="elModel" updates="None" val="EYELINK 1000 DESKTOP" valType="str"/>
    <Param name="elPupilAlgorithm" updates="None" val="ELLIPSE_FIT" valType="str"/>
    <Param name="elPupilMeasure" updates="None" val="PUPIL_AREA" valType="str"/>
    <Param name="elSampleRate" updates="None" val="1000" valType="num"/>
    <Param name="elSimMode" updates="None" val="False" valType="bool"/>
    <Param name="elTrackEyes" updates="None" val="RIGHT_EYE" valType="str"/>
    <Param name="elTrackingMode" updates="None" val="PUPIL_CR_TRACKING" valType="str"/>
    <Param name="expName" updates="None" val="eeg_contingent_digits" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="eyetracker" updates="None" val="None" valType="str"/>
    <Param name="gpAddress" updates="None" val="127.0.0.1" valType="str"/>
    <Param name="gpPort" updates="None" val="4242" valType="num"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
    <Param name="mgBlink" updates="None" val="('MIDDLE_BUTTON',)" valType="list"/>
    <Param name="mgMove" updates="None" val="CONTINUOUS" valType="str"/>
    <Param name="mgSaccade" updates="None" val="0.5" valType="num"/>
    <Param name="tbLicenseFile" updates="None" val="" valType="str"/>
    <Param name="tbModel" updates="None" val="" valType="str"/>
    <Param name="tbSampleRate" updates="None" val="60" valType="num"/>
    <Param name="tbSerialNo" updates="None" val="" valType="str"/>
  </Settings>
  <Routines>
    <Routine name="digits_played">
      <CodeComponent name="code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="import {randint} from 'random';&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="counter = 0;&amp;#10;digits = [0];&amp;#10;firstdigit = 0;&amp;#10;seconddigit = 0;&amp;#10;thirddigit = 0;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="counter += 1;&amp;#10;firstdigit = NFB_digit1;&amp;#10;seconddigit = NFB_digit2;&amp;#10;thirddigit = NFB_digit3;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="if NV == 1 and SiN == 0:&amp;#10;    # Start replaying background noise because it was stopped in the NV speech task&amp;#10;    # Elsas code: sd.play(sound_noise, fs, loop=True)&amp;#10;    &amp;#10;    sound_noise.stop()" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="if use_lpt:&amp;#10;    if sound_digit1.status == STARTED:&amp;#10;        port.setData(12)&amp;#10;    elif sound_digit2.status == STARTED:&amp;#10;        port.setData(22)&amp;#10;    elif sound_digit3.status == STARTED:&amp;#10;        port.setData(32)" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="/* Syntax Error: Fix Python code */" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="if NV == 1 and SiN == 0:&amp;#10;    # Start replaying background noise because it was stopped in the NV speech task&amp;#10;    # Elsas code: sd.play(sound_noise, fs, loop=True)&amp;#10;    &amp;#10;    sound_noise.play()" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code" valType="code"/>
      </CodeComponent>
      <SoundComponent name="sound_digit1">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="hamming" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="sound_digit1" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="sound" updates="set every repeat" val="$digit1" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="constant" val="False" valType="bool"/>
        <Param name="volume" updates="constant" val="1" valType="num"/>
      </SoundComponent>
      <SoundComponent name="sound_digit2">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="hamming" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="sound_digit2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="sound" updates="set every repeat" val="$digit2" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="condition" valType="str"/>
        <Param name="startVal" updates="None" val="$sound_digit1.status == FINISHED" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="constant" val="False" valType="bool"/>
        <Param name="volume" updates="constant" val="1" valType="num"/>
      </SoundComponent>
      <SoundComponent name="sound_digit3">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="hamming" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="sound_digit3" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="sound" updates="set every repeat" val="$digit3" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="condition" valType="str"/>
        <Param name="startVal" updates="None" val="$sound_digit2.status == FINISHED" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="constant" val="False" valType="bool"/>
        <Param name="volume" updates="constant" val="1" valType="num"/>
      </SoundComponent>
    </Routine>
    <Routine name="Calibrating">
      <CodeComponent name="Code_calibration">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# In this routine, the alpha ratios of the subject will be recorded during the&amp;#10;# so-called &quot;calibration phase&quot;. Once collected, the mean and std will be calculated.&amp;#10;# At the end of the routine, the individual factor for the threshold will be estimated:&amp;#10;# Threshold = mean_ratio_calibration + estimated_indiv_factor * std_ratio_calibration&amp;#10;&amp;#10;# set EEG marker for calibration&amp;#10;if use_lpt:&amp;#10;    port.setData(91)&amp;#10;&amp;#10;# Start playing background noise&amp;#10;sound_noise.play()&amp;#10;&amp;#10;# Default values for signal processing and mean and std calculation &amp;#10;signal = 0&amp;#10;blue_elecs = 0&amp;#10;red_elecs = 0&amp;#10;ratio_elecs = 0&amp;#10;count = 0&amp;#10;ratio_vec_rs = 0&amp;#10;ratio_vec_mean = 0&amp;#10;ratio_vec_std = 0&amp;#10;&amp;#10;# Default values for calculating individualized threshold&amp;#10;nFound_triggers = 0&amp;#10;current_factor = max_factor&amp;#10;diff_vector = []&amp;#10;triggers = []&amp;#10;first_trigger = []&amp;#10;rest_triggers = []&amp;#10;def_triggers = []&amp;#10;indiv_factor = 0&amp;#10;counter = 0&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="# pull chunks from the EEG stream (see startup)&amp;#10;chunk, timestamps = inlet_EEG.pull_chunk()&amp;#10;chunks_frame = [i[0:32] for i in chunk] # select the 32 elecs of interest&amp;#10;&amp;#10;# calculate the alpha ratios of the incoming signal. Blue elecs and red elecs are&amp;#10;# chosen from the topomap of TH's results.&amp;#10;if chunks_frame:&amp;#10;    signal = chunks_frame&amp;#10;    # just select the elecs of interest and average them&amp;#10;    blue_elecs = np.average([signal[0][Fz], signal[0][F8], signal[0][FT10], signal[0][O1]])&amp;#10;    red_elecs = np.average([signal[0][C3], signal[0][CP1]])&amp;#10;    # build the ratio between these 2 clusters&amp;#10;    ratio_elecs = red_elecs - blue_elecs&amp;#10;    sys.stdout = dataCalibration_file # open file for saving ratios during calibration&amp;#10;    print(timestamps, ratio_elecs) # saving ratios during calibration&amp;#10;&amp;#10;# actualize count of frame&amp;#10;count += 1&amp;#10;&amp;#10;# vector gathering ratios of each frame&amp;#10;ratio_vec_rs = np.append(ratio_vec_rs, ratio_elecs) &amp;#10;&amp;#10;# once calibration is over, calculates the mean and std of alpha ratio gathered&amp;#10;# during the calibration&amp;#10;if count == baseline_duration_frames: # once vector is 100 sec long, get the mean and std&amp;#10;    sys.stdout = sys.__stdout__ # close the data calibration file&amp;#10;    ratio_vec_mean = np.average(ratio_vec_rs) # mean of the 100 seconds calibration&amp;#10;    ratio_vec_std = np.std(ratio_vec_rs) # std of the 100 seconds calibration&amp;#10;    sys.stdout = meanstd_file # open file for saving std and mean&amp;#10;    print(ratio_vec_mean) # saving mean&amp;#10;    print(ratio_vec_std) # saving std&amp;#10;    sys.stdout = sys.__stdout__ # close std and mean file&amp;#10;    # print mean and std in the console to check the values&amp;#10;    print('mean = ', ratio_vec_mean)&amp;#10;    print('std = ', ratio_vec_std)&amp;#10;    &amp;#10;    &amp;#10;    &amp;#10;    &amp;#10;&amp;#10;           &amp;#10;    &amp;#10;    &amp;#10;&amp;#10;    &amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# Stop the background noise&amp;#10;sound_noise.stop()&amp;#10;&amp;#10;# find the individual factor of the current subject&amp;#10;ratio_vec_rs = np.array(ratio_vec_rs) # convert baseline signal as array&amp;#10;&amp;#10;# to find the individual factor, we start from the greatest acceptable factor&amp;#10;# and check how many triggers we find for each factor. Once the number of&amp;#10;# found triggers is greater or equal than the number estimated in &quot;startup&quot;, &amp;#10;# we get the previous factor in the while loop,&amp;#10;# which is greater than the current one (if found_trigger == 10 for a current_factor == 2.5,&amp;#10;# we will take the factor of the preceding iteration, that is, 2.6).&amp;#10;# If the current_factor is smaller than the lowest acceptable factor, we have to&amp;#10;# exclude the current subject.&amp;#10;# Properties: We do not save consecutive triggers lasting as long as the ITI (2 sec). If &amp;#10;# the length of consecutive triggers is greater than the ITI (in sample count), we &amp;#10;# save 2 triggers out of this vector: the first one and the nth sample exceeding the ITI.&amp;#10;&amp;#10;while nFound_triggers &lt; nTrigger_Baseline and current_factor &gt; 0:&amp;#10;    # find the indices of the calibration samples which are reaching the current threshold&amp;#10;    triggers = np.where(ratio_vec_rs &gt; ratio_vec_mean + current_factor*ratio_vec_std)&amp;#10;    sys.stdout = allTriggers_baseline # open file for all found triggers during calibration&amp;#10;    print(current_factor, triggers[0])&amp;#10;    sys.stdout = sys.__stdout__ # close file for all found triggers during calibration&amp;#10;    &amp;#10;    # if there is only 1 trigger found, save it in the definitive trigger vector:&amp;#10;    if len(triggers[0]) == 1:&amp;#10;        def_triggers = triggers[0][0]&amp;#10;        &amp;#10;    # if there is more than 1 trigger found, do the later&amp;#10;    elif len(triggers[0]) &gt; 1:&amp;#10;        # get the first trigger&amp;#10;        first_trigger = triggers[0][0]&amp;#10;        # the rest of the triggers are saved separately to check for the difference&amp;#10;        # between the first and the other triggers later.&amp;#10;        rest_triggers = triggers[0][1:]&amp;#10;        &amp;#10;        # check for consecutive samples&amp;#10;        counter = 0&amp;#10;        for x in rest_triggers:&amp;#10;            # check distance between first trigger and next&amp;#10;            # if not sufficiently large ...&amp;#10;            if not (np.diff([first_trigger,x]) &gt; min_ITI_samples):&amp;#10;                # ... then delete second trigger, go on&amp;#10;                rest_triggers= np.delete(rest_triggers, counter)&amp;#10;            else: # if distance ok:&amp;#10;                # move on with checking distance from next trigger and keep the&amp;#10;                # value in the vector&amp;#10;                first_trigger = rest_triggers[counter]&amp;#10;                # increase counter&amp;#10;                counter +=1  &amp;#10;                &amp;#10;        # once the loop is done, write a definitive trigger vector with all triggers&amp;#10;        # there:&amp;#10;        def_triggers = rest_triggers&amp;#10;        # prepend first trigger to result (because it was not there)&amp;#10;        def_triggers = np.insert(def_triggers, 0, triggers[0][0], axis=0)&amp;#10;        print(current_factor, &quot;definitive triggers:&quot;, def_triggers)&amp;#10;        &amp;#10;    # get the number of definitive found triggers&amp;#10;    nFound_triggers = len(def_triggers)&amp;#10;    print(current_factor, &quot;number of definitive triggers:&quot;, nFound_triggers)&amp;#10;    current_factor -= step_factor&amp;#10;    current_factor = round(current_factor,1)&amp;#10;&amp;#10;if current_factor &gt; 0:&amp;#10;    # get the factor of the preceding iteration&amp;#10;    indiv_factor = round(current_factor+step_factor, 1)&amp;#10;    #indiv_factor = current_factor&amp;#10;    sys.stdout = indiv_factor_file # open file for saving individualized factor&amp;#10;    print(indiv_factor)&amp;#10;    sys.stdout = sys.__stdout__ # close individualized factor file&amp;#10;&amp;#10;    # Once the loop is over, check the reason why this loop stops:&amp;#10;    # 1) the current factor is smaller than the minimum acceptable factor or&amp;#10;    # 2) if the number or found triggers is greater than the number estimated in &quot;startup&quot;.&amp;#10;&amp;#10;    if indiv_factor &lt; min_factor: # check for 1)&amp;#10;        print(&quot;The individualized factor of this subject is equal to&quot;, indiv_factor, &quot;which is smaller than the smallest acceptable factor&quot;, min_factor) # exclude the subject&amp;#10;    else: # check for 2)&amp;#10;        print(&quot;indiv factor = &quot;, indiv_factor)&amp;#10;&amp;#10;else: # if current_factor =&lt; 0&amp;#10;    print(&quot;No positive trigger could be found for this person: too much triggers needed in short time&quot;)&amp;#10;&amp;#10;# print current thresh of subject:&amp;#10;print('thresh =', ratio_vec_mean + int(indiv_factor) * ratio_vec_std)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="Code_calibration" valType="code"/>
      </CodeComponent>
      <TextComponent name="Fixation_cross">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.2" valType="code"/>
        <Param name="name" updates="None" val="Fixation_cross" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="baseline_duration_sec" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="+" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="Response_subjects">
      <CodeComponent name="code_resp_keys">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# In this routine, the reponse of the subject are saved.&amp;#10;# The subjects have to type the 3 digits separately (one per screen) and confirm&amp;#10;# their end choice by pressing enter: digit 1 - ENTER - digit 2 - ENTER - digit 3 - ENTER&amp;#10;# Output: Excel file in the data folder of PsychoPy. Note that every key pressed&amp;#10;# are saved in this output file. The actual response of the subject is the reponse&amp;#10;# just before the &quot;enter&quot; keypress&amp;#10;&amp;#10;count = 0&amp;#10;response = ''&amp;#10;theseKeys3 = []&amp;#10;keyPress = []&amp;#10;response_string = []&amp;#10;&amp;#10;sound_noise.play()" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="# Collect every pressed key&amp;#10;keyPress = event.getKeys(keyList=['num_1','num_2','num_3','num_4','num_5','num_6', 'num_7', 'num_8','num_9','num_0', 'return'])&amp;#10;# Gather the pressed key in a string vector&amp;#10;response_string = &quot;&quot;.join(key_resp.keys).replace('num_', '') &amp;#10;&amp;#10;if response_string: # if response_string is not empty:&amp;#10;    # only disp the last pressed key to enable the subjects to do corrections &amp;#10;    # (their final response is the last keypress before &quot;enter&quot;)&amp;#10;    response = response_string[-1] &amp;#10;&amp;#10;response_text_exp = &quot;Gehörte Ziffer: {}&quot;.format(response)&amp;#10;&amp;#10;if &quot;return&quot; in keyPress: # if &quot;enter&quot; key pressed&amp;#10;    continueRoutine = False # pass to the next iteration (digit)&amp;#10;&amp;#10;&amp;#10;        &amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# set EEG marker after each digit response &amp;#10;if use_lpt:&amp;#10;    if response_exp.thisN == 0:&amp;#10;        port.setData(42)&amp;#10;    elif response_exp.thisN == 1:&amp;#10;        port.setData(52)&amp;#10;    elif response_exp.thisN == 2:&amp;#10;        port.setData(62)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_resp_keys" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="key_resp">
        <Param name="allowedKeys" updates="constant" val="'num_0','num_1', 'num_2', 'num_3', 'num_4', 'num_5', 'num_6', 'num_7', 'num_8', 'num_9', 'return'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="all keys" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="disp_answer">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="disp_answer" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every frame" val="$response_text_exp" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="signal_check">
      <CodeComponent name="code_2">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="import * as np from 'numpy';&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="# Default values for normalizing the signal&amp;#10;signal_trials = []&amp;#10;trial_nr = []&amp;#10;&amp;#10;# Default color values&amp;#10;ratio_vec = 0&amp;#10;current_mean_ratio = 0&amp;#10;&amp;#10;# block and trial counter&amp;#10;nExpBlock = 1&amp;#10;nExpTrials = 0&amp;#10;&amp;#10;&amp;#10;#default variables for digit playback&amp;#10;firstdigit = 0&amp;#10;seconddigit = 0&amp;#10;thirddigit = 0&amp;#10;noise = [100,60,50,60,30,45,25,20,85]&amp;#10;speaker = [1,7,10,13,14,21,33,48,49,61]&amp;#10;digit1 = 'NVS_Speaker_1_digit_0_100_envExtDepPt.wav_48kHz_filtered_mono'&amp;#10;digit2 = 'NVS_Speaker_1_digit_0_100_envExtDepPt.wav_48kHz_filtered_mono'&amp;#10;digit3 = 'NVS_Speaker_1_digit_0_100_envExtDepPt.wav_48kHz_filtered_mono'&amp;#10;&amp;#10;ITI = 120 #set the iter trial interval at 2s (60 frames per second: 2 seconds = 120 frames)&amp;#10;&amp;#10;# default ITI&amp;#10;ctrl_ITI = ITI&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="duration = 0;&amp;#10;continueRoutine = true;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# In this routine, we check the ongoing alpha ratio of the subject. If an alpha&amp;#10;# ratio sample is greater than the threshold, the stimuli are triggered.&amp;#10;# Threshold = mean_ratio_calibration + estimated_indiv_factor * std_ratio_calibration&amp;#10;&amp;#10;# set EEG marker for calibration&amp;#10;if use_lpt:&amp;#10;    port.setData(92)&amp;#10;&amp;#10;&amp;#10;&amp;#10;#continueRoutine = True&amp;#10;count = 0&amp;#10;disp = 0&amp;#10;signal_current_trial = np.array([])&amp;#10;&amp;#10;#trigger1 = time.time() # get timestamp as seconds&amp;#10;#trigger2 = 0&amp;#10;&amp;#10;# Define the subset of stimuli to play depending on block 1 or block 2:&amp;#10;# block 1: Trials 1 to 70&amp;#10;# block 2: Trials 71 to 140&amp;#10;# The last entry of the slice is not being included, so the last included will be (nTrials_half - 1).&amp;#10;# This is what we need because we want it to be (nTrials_half-1) because of the Python indexing starting from 0&amp;#10;trial_nr = slice(0, nTrials_half) &amp;#10;if nExpBlock == 2:&amp;#10;    trial_nr = slice(nTrials_half, nTrials) &amp;#10;&amp;#10;#print(nExpBlock, nExpTrials, trial_nr)&amp;#10;&amp;#10;# Define the current task to play: NV speech or SiN&amp;#10;t_trial_start = time.time()&amp;#10;NV = []&amp;#10;SiN = []&amp;#10;if order_task_trial[nExpTrials] == 0:&amp;#10;    NV = 1&amp;#10;    SiN = 0&amp;#10;else: &amp;#10;    NV = 0&amp;#10;    SiN = 1&amp;#10;&amp;#10;# need to move parts from digits_played to here to start preparing things!&amp;#10;# In this routine, the triplets are presented once the threshold&amp;#10;# was reached in the previous routine. If NV speech or SiN is presented&amp;#10;# depends on the random trial order defined in startup.&amp;#10;# Maybe we could find a way to buffer the audio files in order to decrease the&amp;#10;# delay.&amp;#10;&amp;#10;# Randomly choose one speaker for the current trial&amp;#10;rand_speaker = np.random.choice(speaker, size = 1)&amp;#10;rand_speaker = int(rand_speaker[0])&amp;#10;&amp;#10;jitter = np.random.uniform(-1,0,1) * refresh_rate&amp;#10;&amp;#10;# set upper bound for control condition ITI to be 5 seconds +/- 1&amp;#10;if ctrl_ITI &gt; 600:&amp;#10;    ctrl_ITI = 300&amp;#10;&amp;#10;#print(rand_speaker)&amp;#10;&amp;#10;# Defining the current digits&amp;#10;firstdigit = int(NFB_digit1)&amp;#10;seconddigit = int(NFB_digit2)&amp;#10;thirddigit = int(NFB_digit3)&amp;#10;&amp;#10;if NV == 1 and SiN == 0:&amp;#10;    &amp;#10;    # Stop the background noise: For NV speech, we don't want any background noise&amp;#10;    # during stimulus presentation&amp;#10;    #sound_noise.stop()&amp;#10;    &amp;#10;    # Playing the first digit&amp;#10;    if firstdigit &lt; 8:&amp;#10;        digit1 = 'NVS_4CHS_Speaker'+str(rand_speaker)+'_Digit'+str(firstdigit)+'_'+str(noise[firstdigit])+'ptEnv_48kHz_filtered_mono.wav'&amp;#10;    else: # here we have to change the index since there is no 7 in the stimuli&amp;#10;        digit1 = 'NVS_4CHS_Speaker'+str(rand_speaker)+'_Digit'+str(firstdigit)+'_'+str(noise[firstdigit-1])+'ptEnv_48kHz_filtered_mono.wav'&amp;#10;&amp;#10;    # Playing the second digit&amp;#10;    if seconddigit &lt; 8:&amp;#10;        digit2 = 'NVS_4CHS_Speaker'+str(rand_speaker)+'_Digit'+str(seconddigit)+'_'+str(noise[seconddigit])+'ptEnv_48kHz_filtered_mono.wav'&amp;#10;    else: # here we have to change the index since there is no 7 in the stimuli&amp;#10;        digit2 = 'NVS_4CHS_Speaker'+str(rand_speaker)+'_Digit'+str(seconddigit)+'_'+str(noise[seconddigit-1])+'ptEnv_48kHz_filtered_mono.wav'&amp;#10;&amp;#10;    # Playing the third digit&amp;#10;    if thirddigit &lt; 8:&amp;#10;        digit3 = 'NVS_4CHS_Speaker'+str(rand_speaker)+'_Digit'+str(thirddigit)+'_'+str(noise[thirddigit])+'ptEnv_48kHz_filtered_mono.wav'&amp;#10;    else: # here we have to change the index since there is no 7 in the stimuli&amp;#10;        digit3 = 'NVS_4CHS_Speaker'+str(rand_speaker)+'_Digit'+str(thirddigit)+'_'+str(noise[thirddigit-1])+'ptEnv_48kHz_filtered_mono.wav'&amp;#10;&amp;#10;&amp;#10;elif NV == 0 and SiN == 1:&amp;#10;    &amp;#10;    # Playing the first digit&amp;#10;    if firstdigit &lt; 8:&amp;#10;        digit1 = 'Speaker'+str(rand_speaker)+'_Digit'+str(firstdigit)+'_48kHz_filtered_mono.wav'&amp;#10;    else: # here we have to change the index since there is no 7 in the stimuli&amp;#10;        digit1 = 'Speaker'+str(rand_speaker)+'_Digit'+str(firstdigit)+'_48kHz_filtered_mono.wav'&amp;#10;&amp;#10;    # Playing the second digit&amp;#10;    if seconddigit &lt; 8:&amp;#10;        digit2 = 'Speaker'+str(rand_speaker)+'_Digit'+str(seconddigit)+'_48kHz_filtered_mono.wav'&amp;#10;    else: # here we have to change the index since there is no 7 in the stimuli&amp;#10;        digit2 = 'Speaker'+str(rand_speaker)+'_Digit'+str(seconddigit)+'_48kHz_filtered_mono.wav'&amp;#10;&amp;#10;    # Playing the third digit&amp;#10;    if thirddigit &lt; 8:&amp;#10;        digit3 = 'Speaker'+str(rand_speaker)+'_Digit'+str(thirddigit)+'_48kHz_filtered_mono.wav'&amp;#10;    else: # here we have to change the index since there is no 7 in the stimuli&amp;#10;        digit3 = 'Speaker'+str(rand_speaker)+'_Digit'+str(thirddigit)+'_48kHz_filtered_mono.wav'&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;# shall we try to prepare sounds here?&amp;#10;&amp;#10;sound_digit1 = sound.Sound(digit1, preBuffer= -1)&amp;#10;sound_digit2 = sound.Sound(digit2, preBuffer= -1)&amp;#10;sound_digit3 = sound.Sound(digit3, preBuffer= -1)&amp;#10; &amp;#10;# default condition (first trial) is trigger condition!&amp;#10;trial_trig = True&amp;#10;&amp;#10;# overwrite individual factor, set to 1 SD&amp;#10;if use_debug:&amp;#10;    indiv_factor = 1&amp;#10;    ratio_vec_mean = 0&amp;#10;    ratio_vec_std = 0.5&amp;#10;&amp;#10;&amp;#10;# Start playing background noise&amp;#10;sound_noise.play()&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="# actualize count of frame&amp;#10;count += 1&amp;#10;&amp;#10;# pull chunks from the EEG stream&amp;#10;chunk, timestamps = inlet_EEG.pull_chunk()&amp;#10;chunks_frame = [i[0:32] for i in chunk] # select the 32 elecs of interest&amp;#10;    &amp;#10;# calculate the alpha ratios of the incoming signal. Blue elecs and red elecs are&amp;#10;# chosen from the topomap of TH's results.&amp;#10;if chunks_frame:&amp;#10;    signal = chunks_frame&amp;#10;    # just select the elecs of interest and average them&amp;#10;    #blue_elecs = np.average([signal[0][Fz], signal[0][F8], signal[0][FT10], signal[0][O1]])&amp;#10;    #red_elecs = np.average([signal[0][C3], signal[0][CP1]])&amp;#10;    blue_elecs = np.average([signal[0][CP2], signal[0][Oz], signal[0][FT9], signal[0][FP1],signal[0][FP2]])&amp;#10;    red_elecs = np.average([signal[0][T7], signal[0][TP9], signal[0][P7], signal[0][CP5], signal[0][P3],signal[0][T8], signal[0][TP10]])&amp;#10;&amp;#10;    # build the ratio between these 2 clusters&amp;#10;    ratio_elecs = red_elecs - blue_elecs&amp;#10;    sys.stdout = dataSignalCheck_file # open Signal check file to save ratios during signal check&amp;#10;    #print(&quot;data_signalCheck&quot;)&amp;#10;    print(timestamps, ratio_elecs)&amp;#10;&amp;#10;# vector gathering signal for subsequent control condition&amp;#10;signal_current_trial = np.append(signal_current_trial, ratio_elecs)&amp;#10;&amp;#10;if count &gt; ITI: # wait for 2 seconds (ITI) before checking if the threshold is reached&amp;#10;    #if use_debug: # if in debug mode, stimulate every 2 seconds&amp;#10;    #    sys.stdout = sys.__stdout__ # close signal check file&amp;#10;    #    continueRoutine = False # ends the current routine&amp;#10;    # in trigger condition: check whether ratio larger than threshold&amp;#10;    if trial_trig:&amp;#10;        if ratio_elecs &gt; ratio_vec_mean + int(indiv_factor) * ratio_vec_std: # if threshold is reached, current routine ends and stimuli are delivered&amp;#10;        #if ratio_elecs == ratio_elecs:&amp;#10;            sys.stdout = sys.__stdout__ # close signal check file&amp;#10;            # at which time have we triggered?&amp;#10;            # we need count variable + ITI&amp;#10;            #trigger2 = time.time()&amp;#10;            t_trial_trig = time.time()&amp;#10;            &amp;#10;            # should be in seconds - this is for the next untriggered stimulation&amp;#10;            ctrl_ITI = (t_trial_trig - t_trial_start) * refresh_rate&amp;#10;            # toggle trial condition&amp;#10;            trial_trig = False&amp;#10;            continueRoutine = False # ends the current routine&amp;#10;    # in control condition: check when enough time has passed&amp;#10;    else:&amp;#10;        if count &gt; ctrl_ITI + jitter: # if threshold is reached, current routine ends and stimuli are delivered&amp;#10;            #if ratio_elecs == ratio_elecs:&amp;#10;            sys.stdout = sys.__stdout__ # close signal check file&amp;#10;            #trigger2 = time.time()&amp;#10;            # toggle trial condition&amp;#10;            trial_trig = True&amp;#10;            continueRoutine = False # ends the current routine                &amp;#10;&amp;#10;            &amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="duration = (np.random.normal(0, 1, 1) * 5);&amp;#10;if ((duration &gt; 10)) {&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# save signal of the current trial in a list for control condition&amp;#10;# it will then be used to determine the duration it took to trigger the stimuli&amp;#10;# for each trial.&amp;#10;signal_trials.append(signal_current_trial)&amp;#10;&amp;#10;#sys.stdout = MarkerExp&amp;#10;#print(trigger1, trigger2)&amp;#10;#sys.stdout = sys.__stdout__&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_2" valType="code"/>
      </CodeComponent>
      <TextComponent name="Fixation">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.2" valType="code"/>
        <Param name="name" updates="None" val="Fixation" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="+" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="text_6">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="num"/>
        <Param name="name" updates="None" val="text_6" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every frame" val="$ratio_elecs" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
      <TextComponent name="text_2">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="num"/>
        <Param name="name" updates="None" val="text_2" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, -0.1)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every frame" val="$indiv_factor" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
      <TextComponent name="text_7">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="num"/>
        <Param name="name" updates="None" val="text_7" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, -0.2)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every frame" val="$ratio_vec_mean" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
      <TextComponent name="text_8">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="num"/>
        <Param name="name" updates="None" val="text_8" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, -0.3)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every frame" val="$ratio_vec_std" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
    </Routine>
    <Routine name="signal_check_2">
      <CodeComponent name="code_3">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="import * as np from 'numpy';&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="# Setting up the replay of ITI of the experimental condition.&amp;#10;# Once ITI is replayed, the digits are presented. Thus, we trigger without&amp;#10;# checking at the subject's alpha ratio&amp;#10;&amp;#10;# block and trial counter&amp;#10;nCtrlBlock = 1&amp;#10;nCtrlTrials = 0&amp;#10;trial_nr_ctrl = []" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="duration = 0;&amp;#10;continueRoutine = true;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# set EEG marker for calibration&amp;#10;if use_lpt:&amp;#10;    port.setData(93)&amp;#10;&amp;#10;# Set default values&amp;#10;count_frames = 0&amp;#10;disp = 0&amp;#10;&amp;#10;#trigger1 = time.time() # get timestamp as seconds&amp;#10;#trigger2 = 0&amp;#10;&amp;#10;&amp;#10;# Define the subset of stimuli to play depending on block 1 or block 2:&amp;#10;# block 1: Trials 1 to 70&amp;#10;# block 2: Trials 71 to 140&amp;#10;# The last entry of the slice is not being included, so the last included will be (nTrials_half - 1).&amp;#10;# This is what we need because we want it to be (nTrials_half-1) because of the Python indexing starting from 0&amp;#10;trial_nr_ctrl = slice(0, nTrials_half) &amp;#10;if nCtrlBlock == 2:&amp;#10;    trial_nr_ctrl = slice(nTrials_half, nTrials) &amp;#10;&amp;#10;#print(nCtrlBlock, nCtrlTrials, trial_nr_ctrl)&amp;#10;&amp;#10;# Define the current task to play: NV speech or SiN&amp;#10;NV = []&amp;#10;SiN = []&amp;#10;if order_task_trial[nCtrlTrials] == 0:&amp;#10;    NV = 1&amp;#10;    SiN = 0&amp;#10;else: &amp;#10;    NV = 0&amp;#10;    SiN = 1&amp;#10;    &amp;#10;    &amp;#10;    &amp;#10;# need to move parts from digits_played to here to start preparing things!&amp;#10;# In this routine, the triplets are presented once the threshold&amp;#10;# was reached in the previous routine. If NV speech or SiN is presented&amp;#10;# depends on the random trial order defined in startup.&amp;#10;# Maybe we could find a way to buffer the audio files in order to decrease the&amp;#10;# delay.&amp;#10;&amp;#10;# Randomly choose one speaker for the current trial&amp;#10;rand_speaker = np.random.choice(speaker, size = 1)&amp;#10;rand_speaker = int(rand_speaker[0])&amp;#10;#print(rand_speaker)&amp;#10;&amp;#10;# Defining the current digits&amp;#10;firstdigit = int(NFB_digit1)&amp;#10;seconddigit = int(NFB_digit2)&amp;#10;thirddigit = int(NFB_digit3)&amp;#10;&amp;#10;if NV == 1 and SiN == 0:&amp;#10;    &amp;#10;    # Stop the background noise: For NV speech, we don't want any background noise&amp;#10;    # during stimulus presentation&amp;#10;    #sound_noise.stop()&amp;#10;    &amp;#10;    # Playing the first digit&amp;#10;    if firstdigit &lt; 8:&amp;#10;        digit1 = 'NVS_4CHS_Speaker'+str(rand_speaker)+'_Digit'+str(firstdigit)+'_'+str(noise[firstdigit])+'ptEnv_48kHz_filtered_mono.wav'&amp;#10;    else: # here we have to change the index since there is no 7 in the stimuli&amp;#10;        digit1 = 'NVS_4CHS_Speaker'+str(rand_speaker)+'_Digit'+str(firstdigit)+'_'+str(noise[firstdigit-1])+'ptEnv_48kHz_filtered_mono.wav'&amp;#10;&amp;#10;    # Playing the second digit&amp;#10;    if seconddigit &lt; 8:&amp;#10;        digit2 = 'NVS_4CHS_Speaker'+str(rand_speaker)+'_Digit'+str(seconddigit)+'_'+str(noise[seconddigit])+'ptEnv_48kHz_filtered_mono.wav'&amp;#10;    else: # here we have to change the index since there is no 7 in the stimuli&amp;#10;        digit2 = 'NVS_4CHS_Speaker'+str(rand_speaker)+'_Digit'+str(seconddigit)+'_'+str(noise[seconddigit-1])+'ptEnv_48kHz_filtered_mono.wav'&amp;#10;&amp;#10;    # Playing the third digit&amp;#10;    if thirddigit &lt; 8:&amp;#10;        digit3 = 'NVS_4CHS_Speaker'+str(rand_speaker)+'_Digit'+str(thirddigit)+'_'+str(noise[thirddigit])+'ptEnv_48kHz_filtered_mono.wav'&amp;#10;    else: # here we have to change the index since there is no 7 in the stimuli&amp;#10;        digit3 = 'NVS_4CHS_Speaker'+str(rand_speaker)+'_Digit'+str(thirddigit)+'_'+str(noise[thirddigit-1])+'ptEnv_48kHz_filtered_mono.wav'&amp;#10;&amp;#10;&amp;#10;elif NV == 0 and SiN == 1:&amp;#10;    &amp;#10;    # Playing the first digit&amp;#10;    if firstdigit &lt; 8:&amp;#10;        digit1 = 'Speaker'+str(rand_speaker)+'_Digit'+str(firstdigit)+'_48kHz_filtered_mono.wav'&amp;#10;    else: # here we have to change the index since there is no 7 in the stimuli&amp;#10;        digit1 = 'Speaker'+str(rand_speaker)+'_Digit'+str(firstdigit)+'_48kHz_filtered_mono.wav'&amp;#10;&amp;#10;    # Playing the second digit&amp;#10;    if seconddigit &lt; 8:&amp;#10;        digit2 = 'Speaker'+str(rand_speaker)+'_Digit'+str(seconddigit)+'_48kHz_filtered_mono.wav'&amp;#10;    else: # here we have to change the index since there is no 7 in the stimuli&amp;#10;        digit2 = 'Speaker'+str(rand_speaker)+'_Digit'+str(seconddigit)+'_48kHz_filtered_mono.wav'&amp;#10;&amp;#10;    # Playing the third digit&amp;#10;    if thirddigit &lt; 8:&amp;#10;        digit3 = 'Speaker'+str(rand_speaker)+'_Digit'+str(thirddigit)+'_48kHz_filtered_mono.wav'&amp;#10;    else: # here we have to change the index since there is no 7 in the stimuli&amp;#10;        digit3 = 'Speaker'+str(rand_speaker)+'_Digit'+str(thirddigit)+'_48kHz_filtered_mono.wav'&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;# shall we try to prepare sounds here?&amp;#10;sound_digit1_2 = sound.Sound(digit1, preBuffer= -1)&amp;#10;sound_digit2_2 = sound.Sound(digit2, preBuffer= -1)&amp;#10;sound_digit3_2 = sound.Sound(digit3, preBuffer= -1)&amp;#10;&amp;#10;# Start playing background noise&amp;#10;sound_noise.play()" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="# actualize count of frame&amp;#10;count_frames += 1&amp;#10;&amp;#10;# pull chunks from the previously resolved EEG stream (see startup)&amp;#10;chunk, timestamps = inlet_EEG.pull_chunk()&amp;#10;chunks_frame = [i[0:32] for i in chunk] # select the 32 elecs of interest&amp;#10;    &amp;#10;# processing the incoming signal to build the ratio&amp;#10;if chunks_frame:&amp;#10;    signal = chunks_frame&amp;#10;    # just select the elecs of interest and average them&amp;#10;    blue_elecs = np.average([signal[0][CP2], signal[0][Oz], signal[0][FT9], signal[0][FP1],signal[0][FP2]])&amp;#10;    red_elecs = np.average([signal[0][T7], signal[0][TP9], signal[0][P7], signal[0][CP5], signal[0][P3],signal[0][T8], signal[0][TP10]])&amp;#10;&amp;#10;    &amp;#10;    ratio_elecs = red_elecs - blue_elecs&amp;#10;    sys.stdout = dataControl_file # open file for saving ratios during control triggering&amp;#10;    #print(&quot;SignalCheck2&quot;)&amp;#10;    print(timestamps, ratio_elecs)&amp;#10;&amp;#10;# dont use the current ratios and just stop the current routine when the replay of ITI is over&amp;#10;if count_frames &gt; len(signal_trials[nCtrlTrials]):&amp;#10;    sys.stdout = sys.__stdout__ # close control triggering file&amp;#10;    #trigger2 = time.time()&amp;#10;    continueRoutine = False&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="duration = (np.random.normal(0, 1, 1) * 5);&amp;#10;if ((duration &gt; 10)) {&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="#sys.stdout = MarkerControl&amp;#10;#print(trigger1, trigger2)&amp;#10;#sys.stdout = sys.__stdout__&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_3" valType="code"/>
      </CodeComponent>
      <TextComponent name="Fixation_2">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.2" valType="code"/>
        <Param name="name" updates="None" val="Fixation_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="+" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="digits_played_2">
      <CodeComponent name="code_4">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="import {randint} from 'random';&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="#default variables&amp;#10;#firstdigit = 0&amp;#10;#seconddigit = 0&amp;#10;#thirddigit = 0&amp;#10;#noise = [100,60,50,60,30,45,25,20,85]&amp;#10;#speaker = [1,7,10,13,14,21,33,48,49,61]&amp;#10;#digit1 = 'NVS_Speaker_1_digit_0_100_envExtDepPt.wav_48kHz_filtered_mono.wav'&amp;#10;#digit2 = 'NVS_Speaker_1_digit_0_100_envExtDepPt.wav_48kHz_filtered_mono.wav'&amp;#10;#digit3 = 'NVS_Speaker_1_digit_0_100_envExtDepPt.wav_48kHz_filtered_mono.wav'" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="counter = 0;&amp;#10;digits = [0];&amp;#10;firstdigit = 0;&amp;#10;seconddigit = 0;&amp;#10;thirddigit = 0;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="counter += 1;&amp;#10;firstdigit = NFB_digit1;&amp;#10;seconddigit = NFB_digit2;&amp;#10;thirddigit = NFB_digit3;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# In this routine, the triplets are presented once the threshold&amp;#10;# was reached in the previous routine. If NV speech or SiN is presented&amp;#10;# depends on the random trial order defined in startup.&amp;#10;# Maybe we could find a way to buffer the audio files in order to decrease the&amp;#10;# delay.&amp;#10;&amp;#10;# now we only play stimuli here, nothing else&amp;#10;# first we send triggers with lpt, should not take long,&amp;#10;# then play digits, should be more precise&amp;#10;&amp;#10;if NV == 1 and SiN == 0:&amp;#10;    &amp;#10;    # Stop the background noise: For NV speech, we don't want any background noise&amp;#10;    # during stimulus presentation&amp;#10;    sound_noise.stop()" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="if use_lpt:&amp;#10;    if sound_digit1_2.status == STARTED:&amp;#10;        port.setData(13)&amp;#10;    elif sound_digit2_2.status == STARTED:&amp;#10;        port.setData(23)&amp;#10;    elif sound_digit3_2.status == STARTED:&amp;#10;        port.setData(33)" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="/* Syntax Error: Fix Python code */" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="#if NV == 1 and SiN == 0:&amp;#10;#    # Start replaying background noise because it was stopped in the NV speech task&amp;#10;#    sound_noise.play()" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_4" valType="code"/>
      </CodeComponent>
      <SoundComponent name="sound_digit1_2">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="hamming" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="sound_digit1_2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="sound" updates="set every repeat" val="$digit1" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="constant" val="False" valType="bool"/>
        <Param name="volume" updates="constant" val="1" valType="num"/>
      </SoundComponent>
      <SoundComponent name="sound_digit2_2">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="hamming" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="sound_digit2_2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="sound" updates="set every repeat" val="$digit2" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="condition" valType="str"/>
        <Param name="startVal" updates="None" val="$sound_digit1_2.status == FINISHED" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="constant" val="False" valType="bool"/>
        <Param name="volume" updates="constant" val="1" valType="num"/>
      </SoundComponent>
      <SoundComponent name="sound_digit3_2">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="hamming" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="sound_digit3_2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="sound" updates="set every repeat" val="$digit3" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="condition" valType="str"/>
        <Param name="startVal" updates="None" val="$sound_digit2_2.status == FINISHED" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="constant" val="False" valType="bool"/>
        <Param name="volume" updates="constant" val="1" valType="num"/>
      </SoundComponent>
    </Routine>
    <Routine name="Response_subjects_2">
      <CodeComponent name="code_resp_keys_3">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="count = 0&amp;#10;response2 = ''&amp;#10;keyPress2 = []&amp;#10;response_string2 = []&amp;#10;&amp;#10;sound_noise.play()" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="# Collect every pressed key&amp;#10;keyPress2 = event.getKeys(keyList=['num_1','num_2','num_3','num_4','num_5','num_6', 'num_7', 'num_8','num_9','num_0', 'return'])&amp;#10;# Gather the pressed key in a string vector&amp;#10;response_string2 = &quot;&quot;.join(key_resp_2.keys).replace('num_', '') &amp;#10;&amp;#10;if response_string2: # if response_string is not empty:&amp;#10;    response2 = response_string2[-1] # disp the last pressed key&amp;#10;&amp;#10;response_text_ctrl = &quot;Gehörte Ziffer {}&quot;.format(response2)&amp;#10;&amp;#10;if &quot;return&quot; in keyPress2: # if &quot;enter&quot; key pressed&amp;#10;    continueRoutine = False # pass to the next iteration&amp;#10;&amp;#10;        &amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# set EEG marker after each digit response &amp;#10;if use_lpt:&amp;#10;    if response_ctrl.thisN == 0:&amp;#10;        port.setData(43)&amp;#10;    elif response_ctrl.thisN == 1:&amp;#10;        port.setData(53)&amp;#10;    elif response_ctrl.thisN == 2:&amp;#10;        port.setData(63)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_resp_keys_3" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="key_resp_2">
        <Param name="allowedKeys" updates="constant" val="'num_0','num_1', 'num_2', 'num_3', 'num_4', 'num_5', 'num_6', 'num_7', 'num_8', 'num_9', 'return'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="all keys" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="disp_answer_2">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="disp_answer_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every frame" val="$response_text_ctrl" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="Startup">
      <CodeComponent name="code_5">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="# This routine prepares the needed elements for the functioning of the experiment.&amp;#10;# It also randomly generates the digit triplet for the experiment (see begin&amp;#10;# routine) and the randomized order of SiN vs NV speech presentation (see end &amp;#10;# routine).&amp;#10;# if you want to change some experiment settings (such as nTrial, duration of the&amp;#10;# calibration etc.), you can do it here&amp;#10;&amp;#10;# import packages---------------------------------------------------------------&amp;#10;&amp;#10;import psychtoolbox as ptb&amp;#10;from pylsl import StreamInlet, resolve_stream&amp;#10;from psychopy import parallel, sound&amp;#10;import numpy as np&amp;#10;import scipy.stats as stats&amp;#10;import sys&amp;#10;import time&amp;#10;import random&amp;#10;import xlsxwriter&amp;#10;#import sounddevice as sd &amp;#10;#import soundfile as sf&amp;#10;from itertools import groupby&amp;#10;&amp;#10;&amp;#10;&amp;#10;# some init and debug parameters&amp;#10;use_debug = True&amp;#10;if use_debug:&amp;#10;    use_lpt = False&amp;#10;    use_real_EEG = True&amp;#10;    tresh_factor = 1.5&amp;#10;else:&amp;#10;    use_lpt = False&amp;#10;    use_real_EEG = True&amp;#10;    tresh_factor = []&amp;#10;&amp;#10;&amp;#10;# open output files-------------------------------------------------------------&amp;#10;&amp;#10;&amp;#10;dataCalibration_file = open(&quot;dataCalibration2.txt&quot;, &quot;w&quot;) # alpha ratio during calibration&amp;#10;meanstd_file = open(&quot;meanStd2.txt&quot;, &quot;w&quot;) # mean and std of the calibration&amp;#10;allTriggers_baseline = open(&quot;allTriggers_baseline2.txt&quot;, &quot;w&quot;) # all found triggers for each tested factor during calibration&amp;#10;indiv_factor_file = open(&quot;indivFactor2.txt&quot;, &quot;w&quot;) # individual factor estimated during calibration for the current subject&amp;#10;dataSignalCheck_file = open(&quot;dataSignalCheck2.txt&quot;, &quot;w&quot;) # alpha ratio during signal check (experimental condition)&amp;#10;StimOrder_file = open(&quot;StimOrder2.txt&quot;, &quot;w&quot;) # order of the trials (is currently SiN or NV speech?)&amp;#10;dataControl_file = open(&quot;dataControl2.txt&quot;, &quot;w&quot;) # alpha ratio during signal check (control condition)&amp;#10;&amp;#10;&amp;#10;# get the EEG stream from OpenVibe----------------------------------------------&amp;#10;&amp;#10;&amp;#10;print(&quot;looking for streams...&quot;)&amp;#10;streams_EEG = resolve_stream('type', 'EEG_extracted')&amp;#10;inlet_EEG = StreamInlet(streams_EEG[0]) # create new inlets to read from the streams&amp;#10;&amp;#10;if use_lpt:&amp;#10;    port = parallel.ParallelPort(address=0xDFF8) # open the parallel port for EEG markers&amp;#10;    port.setData(0) # 0 as marker for begin exp&amp;#10;&amp;#10;&amp;#10;# set triggers------------------------------------------------------------------&amp;#10;&amp;#10;&amp;#10;# The logic of the EEG markers is the following:&amp;#10;# The last number always indicate the current condition: &amp;#10;# ..... 9: start experiment&amp;#10;# ..... 0: practice trials&amp;#10;# ..... 1: calibration phase&amp;#10;# ..... 2: experimental condition&amp;#10;# ..... 3: control condition&amp;#10;# The first number always indicate the type of event&amp;#10;# ..... 10: instructions&amp;#10;# ..... 9: signal check (the time needed to trigger)&amp;#10;# ..... 1,2 or 3: for 1st, 2nd or 3rd presented digit (stimulus presentation)&amp;#10;# ..... 4,5 or 6: for 1st, 2nd or 3rd typed digit (response of the subjects)&amp;#10;&amp;#10;#Examples: &amp;#10;# ..... 101: marker of the instructions before the calibration phase&amp;#10;# ..... 12: marker of the first presented digit during the experimental condition&amp;#10;&amp;#10;# The markers of the break between each block are as follow:&amp;#10;# 1st number = 2&amp;#10;# 2nd number = current block number&amp;#10;# 3rd numner = current condition (see above)&amp;#10;&amp;#10;# Example:&amp;#10;# ..... 212: marker of the first block in the experimental condition&amp;#10;&amp;#10;&amp;#10;#index of electrodes------------------------------------------------------------&amp;#10;# define the index of the elecs of interest for the current experiment &amp;#10;#(actual index -1 because of 0 being the first elem in Python)&amp;#10;&amp;#10;FP1 = 1 -1&amp;#10;Fz = 2 - 1&amp;#10;F3 = 3 - 1&amp;#10;F7 = 4 - 1&amp;#10;FT9 = 5 -1&amp;#10;FC5 = 6 - 1&amp;#10;FC1 = 7 - 1&amp;#10;C3 = 8 - 1&amp;#10;T7 = 9 -1&amp;#10;TP9 = 10 -1&amp;#10;CP5 = 11 - 1&amp;#10;CP1 = 12 - 1&amp;#10;Pz = 13 - 1&amp;#10;P3 = 14 -1&amp;#10;P7 = 15 - 1&amp;#10;O1 = 16 - 1&amp;#10;Oz = 17 - 1&amp;#10;O2 = 18 - 1&amp;#10;P4 = 19 -1&amp;#10;P8 = 20 -1&amp;#10;TP10 = 21 -1&amp;#10;CP6 = 22 -1&amp;#10;CP2 = 23 -1 &amp;#10;Cz = 24 -1&amp;#10;C4 = 25 -1&amp;#10;T8 = 26 -1&amp;#10;FT10 = 27 -1&amp;#10;FC6 = 28 -1&amp;#10;FC2 = 29 -1&amp;#10;F4 = 30 -1&amp;#10;F8 = 31 -1&amp;#10;FP2 = 32 -1 &amp;#10;&amp;#10;&amp;#10;# Default settings for experiment-----------------------------------------------&amp;#10;&amp;#10;# the MAP configuration, which elecs are important &amp;#10;&amp;#10;&amp;#10;&amp;#10;nDigits = 3 # number presented digits in each trial&amp;#10;if use_debug:&amp;#10;    nTrials_1Block = 16 # number of trials in each block, normal is 70&amp;#10;else:&amp;#10;    nTrials_1Block = 70&amp;#10;&amp;#10;nTrials = nTrials_1Block * 2 # number of trials in each condition (experimental vs control), represents 2 blocks.&amp;#10;refresh_rate = 60 # refreshing rate of the screen&amp;#10;min_ITI = 2 # duration of minimal ITI (time during which we don't check if the threshold is reached to trigger the digits)&amp;#10;srate_processed = 16 # sampling rate of the incoming signal&amp;#10;&amp;#10;# adapt calibration&amp;#10;if use_debug:&amp;#10;    baseline_duration_sec = 5 # duration of baseline in seconds, normal is 100&amp;#10;else:&amp;#10;    baseline_duration_sec = 100 # duration of baseline in seconds, normal is 100&amp;#10;&amp;#10;baseline_duration_frames = baseline_duration_sec * refresh_rate # duration of baseline in frames&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;# Default setting for individualized factor calculation-------------------------&amp;#10;&amp;#10;min_factor = 2 # the minimal acceptable factor&amp;#10;max_factor = 3.5 # the maximal acceptable factor&amp;#10;step_factor = 0.1 # step size for testing the different factors&amp;#10;max_duration100Trials_min = 20 # how many minutes should each block last&amp;#10;max_duration100Trials_sec = max_duration100Trials_min * 60 # max minutes of each block converted in seconds&amp;#10;min_ITI_samples = min_ITI*srate_processed # mean ITI converted in number of samples&amp;#10;Interval = round(min_ITI * srate_processed) # how much sample points do we have to count to reach minimal ITI&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;# Since we have to play nTrials_1Block in maximum max_duration100Trials_sec,&amp;#10;# estimates the number of trigger we would have to find during the&amp;#10;# calibration (aka baseline).&amp;#10;interval_trigger_sec = max_duration100Trials_sec / nTrials_1Block # how many trigger should be found for each block&amp;#10;nTrigger_Baseline = round(baseline_duration_sec / interval_trigger_sec) # how many triggers should be found during calibration&amp;#10;#nTrigger_Baseline = 1&amp;#10;&amp;#10;&amp;#10;# Stimuli ----------------------------------------------------------------------&amp;#10;&amp;#10;&amp;#10;# Prepare file background noise&amp;#10;#ELSA's code: sound_noise, fs = sf.read('constantNoise_1minute_16kHz_filtered_mono_looped.wav', dtype='float32')  &amp;#10;#sound_noise, fs = sf.read('constantNoise_1minute_16kHz_filtered_mono_looped.wav', dtype='float32')  &amp;#10;&amp;#10;&amp;#10;#sound_noise = sound.Sound('constantNoise_1minute_16kHz_filtered_mono_looped.wav')  &amp;#10;sound_noise = sound.Sound('constantNoise_1minute_48kHz_filtered_mono_looped.wav',loops = -1, preBuffer= -1)  &amp;#10;&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# This chunk of code is generating random digit triplets for each trial and&amp;#10;# each condition. The triplets are unique between trials&amp;#10;# meaning that there is no repeated triplets within 1 condition.&amp;#10;# Each triplet contains different digits: no repeated digits in one triplet.&amp;#10;# However, the digits are not counterbalanced for each condition (experimental_SiN,&amp;#10;# experimental_NV, control_SiN, control_NV)&amp;#10;&amp;#10;# Preparing variables&amp;#10;nTrials_vector = np.arange(nTrials) # create the trial ID colomn: vector [0:nTrials]&amp;#10;out_matrix = np.zeros((nTrials, nDigits)) # create the array template of size: rows = nTrials , columns = 3 (nDigits)&amp;#10;labels_colomn = np.array([&quot;TrialID&quot;,&quot;NFB_digit1&quot;,&quot;NFB_digit2&quot;,&quot;NFB_digit3&quot;]) # define the labels of the columns for excel&amp;#10;possible_digit = 10 # number of possible digits (with 7)&amp;#10;exception_digit = 7 # digit to get rid off&amp;#10;stimuli_digits = np.arange(possible_digit) # get a vector from 0 to 9 which are the possible digits (with 7)&amp;#10;stimuli_digits = np.delete(stimuli_digits, exception_digit) # delete the digit 7 (not part of the stimuli)&amp;#10;&amp;#10;&amp;#10;# GENERATING DIGITS FOR EXPERIMENTAL CONDITION----------------------------------&amp;#10;&amp;#10;&amp;#10;# create the 3 digits randomly for each trial&amp;#10;for x in nTrials_vector:&amp;#10;    # randomly choose the 3 digits from the possible stimuli without &amp;#10;    # remplacement (no identical digit in the same triplet)&amp;#10;    rand_digit = np.random.choice(stimuli_digits, size = nDigits, replace = False)&amp;#10;    out_matrix[x] = rand_digit&amp;#10;&amp;#10;# get the unique triplets to identify which triplets are repeated between trials&amp;#10;unique_triplets, index_uniques, count_rep_triplets = np.unique(out_matrix, axis = 0, return_index=True, return_counts=True)&amp;#10;&amp;#10;# check if there is at least one row which is repeated (containing the same digits as another row)&amp;#10;repeated_triplets = np.where(count_rep_triplets &gt; 1) # a value &gt; 1 means that the current row (triplet) is present more than once&amp;#10;repeated_triplets = np.asarray(repeated_triplets[0]) # convert as array (more convenient)&amp;#10;# get the index of the repeated triplets in the original matrix&amp;#10;idx_repeated_triplets = index_uniques[repeated_triplets]&amp;#10;&amp;#10;# if at least 1 triplet repeated ...&amp;#10;while len(idx_repeated_triplets) &gt; 0:&amp;#10;    # choose random triplet again (without replacement to avoid identical digits in the triplet)&amp;#10;    out_matrix[idx_repeated_triplets[0]] = np.random.choice(stimuli_digits, size = nDigits, replace = False)&amp;#10;    # check again if there are some repeated triplets&amp;#10;    unique_triplets, index_uniques, count_rep_triplets = np.unique(out_matrix, axis = 0, return_index=True, return_counts=True)&amp;#10;    repeated_triplets = np.where(count_rep_triplets &gt; 1)&amp;#10;    repeated_triplets = np.asarray(repeated_triplets[0])&amp;#10;    # get the index of the repeated triplets in the original matrix&amp;#10;    idx_repeated_triplets = index_uniques[repeated_triplets]&amp;#10;    #continue the loop until no repeated triplets anymore&amp;#10;&amp;#10;# once the stimulus set is done, insert the trial ID next to the triplet&amp;#10;out_matrix = np.insert(out_matrix, 0, nTrials_vector, axis = 1)&amp;#10;# insert labels of columns for PsychoPy to read conditions&amp;#10;out_matrix_4xlsx = np.vstack((labels_colomn, out_matrix))&amp;#10;&amp;#10;# after vstack, the format of the triplets is not the one we want. It is a&amp;#10;# 1 decimal string. We have to convert it in 0 decimal int.&amp;#10;col = np.arange(nDigits+1)&amp;#10;row = np.arange(nTrials+1)&amp;#10;row = row [1:] # get rid of the first row since there are char strings&amp;#10;for x in row:&amp;#10;    for i in col:&amp;#10;        out_matrix_4xlsx[x,i] = round(float(out_matrix_4xlsx[x,i]))&amp;#10;&amp;#10;# Preparing Excel files&amp;#10;workbook = xlsxwriter.Workbook('Stimuli_exp_cond.xlsx')&amp;#10;worksheet = workbook.add_worksheet()&amp;#10;# Start from the first cell. Rows and columns are zero indexed.&amp;#10;row = 0&amp;#10;col = 0&amp;#10;# Iterate over the data and write it out row by row.&amp;#10;for ID_trial, digit1, digit2, digit3 in (out_matrix_4xlsx):&amp;#10;    worksheet.write(row, col, ID_trial)&amp;#10;    worksheet.write(row, col + 1, digit1)&amp;#10;    worksheet.write(row, col + 2, digit2)&amp;#10;    worksheet.write(row, col + 3, digit3)&amp;#10;    row += 1&amp;#10;&amp;#10;workbook.close()&amp;#10;&amp;#10;&amp;#10;# GENERATING DIGITS FOR CONTROL CONDITION---------------------------------------&amp;#10;# As stated above, there are the same contraints for the control condition.&amp;#10;# Chunk of code commented: add the condition that the triplets should be different&amp;#10;# across conditions (experimental vs control).&amp;#10;# We drop this condition since it is never met with increased number of trials.&amp;#10;&amp;#10;&amp;#10;# Preparing variables&amp;#10;out_matrix_control = np.zeros((nTrials, nDigits))  # create the array template of size: rows = nTrials , columns = 3 (nDigits)&amp;#10;elems_in_exp = [] # vector containing the information if current triplet is equal to one triplet in the experimental condition (logical)&amp;#10;inBothMat = True&amp;#10;&amp;#10;# create the 3 digits randomly times the number of trials&amp;#10;for x in nTrials_vector:&amp;#10;    # randomly choose the 3 digits from the possible stimuli vector without &amp;#10;    #remplacement (no identical digit in the same triplet)&amp;#10;    rand_digit = np.random.choice(stimuli_digits, size = nDigits, replace = False)&amp;#10;    out_matrix_control[x] = rand_digit&amp;#10;&amp;#10;# get the unique triplets to identify which triplets are repeated between trials&amp;#10;unique_digits, index_uniques, count_rep_digits = np.unique(out_matrix_control, axis = 0, return_index=True, return_counts=True)&amp;#10;&amp;#10;# check if there is at least one row which is repeated (containing the same digits as another row)&amp;#10;repeated_digits = np.where(count_rep_digits &gt; 1) # a value &gt; 1 means that the current row (triplet) is present more than once&amp;#10;repeated_digits = np.asarray(repeated_digits[0]) # convert as array (more convenient)&amp;#10;# get the index of the repeated digits in the original matrix&amp;#10;idx_repeated_digits = index_uniques[repeated_digits] &amp;#10;&amp;#10;# if at least 1 repeated digit...&amp;#10;while len(idx_repeated_digits) &gt; 0:&amp;#10;    # choose random triplet again (without replacement)&amp;#10;    out_matrix_control[idx_repeated_digits[0]] = np.random.choice(stimuli_digits, size = nDigits, replace = False)&amp;#10;    # check again if there is repeated digits&amp;#10;    unique_digits, index_uniques, count_rep_digits = np.unique(out_matrix_control, axis = 0, return_index=True, return_counts=True)&amp;#10;    repeated_digits = np.where(count_rep_digits &gt; 1)&amp;#10;    repeated_digits = np.asarray(repeated_digits[0])&amp;#10;    # get the index of the repeated digits in the original matrix&amp;#10;    idx_repeated_digits = index_uniques[repeated_digits]&amp;#10;    #continue the loop until no repeated digits anymore&amp;#10;&amp;#10;&amp;#10;# THE CONDITION WE DECIDED TO GET RID OFF:&amp;#10;# delete the TrialID column of the experimental condition matrix (easier for&amp;#10;# comparison)&amp;#10;#out_matrix = out_matrix[:,1:]&amp;#10;&amp;#10;# Now that we have a matrix without repeating triplets, we have to check if the&amp;#10;# matrix of the condition contains same triplets as the control condition&amp;#10;&amp;#10;#while inBothMat:&amp;#10;    &amp;#10;    # check if there is any row (triplet) in control condition matrix contained in&amp;#10;    # experimental condition matrix (output is logical)&amp;#10;    #elems_in_exp = (out_matrix_control[None,:] == out_matrix[:,None]).all(-1).any(0)&amp;#10;    # if any identical triplet found...&amp;#10;    #if any(elems_in_exp):&amp;#10;        # get the index of the duplicates&amp;#10;        #true_elems = np.where(elems_in_exp == True)&amp;#10;        #true_elems = np.asarray(true_elems[0])&amp;#10;        # reroll triplet for the current indices&amp;#10;        #out_matrix_control[true_elems[0]] = np.random.choice(stimuli_digits, size = nDigits, replace = False)&amp;#10;        # check if the previous reroll did not lead to identical triplets in the&amp;#10;        # current stimuli set (control condition)&amp;#10;        #unique_digits, index_uniques, count_rep_digits = np.unique(out_matrix_control, axis = 0, return_index=True, return_counts=True)&amp;#10;        #repeated_digits = np.where(count_rep_digits &gt; 1)&amp;#10;        #repeated_digits = np.asarray(repeated_digits[0])&amp;#10;        # if at least 1 repeated digit, replace it and so on (see comments above)&amp;#10;        #while len(repeated_digits) &gt; 0:&amp;#10;            #out_matrix_control[repeated_digits[0]] = np.random.choice(stimuli_digits, size = nDigits, replace = False)&amp;#10;            #unique_digits, index_uniques, count_rep_digits = np.unique(out_matrix_control, axis = 0, return_index=True, return_counts=True)&amp;#10;            #repeated_digits = np.where(count_rep_digits &gt; 1)&amp;#10;            #repeated_digits = np.asarray(repeated_digits[0])&amp;#10;        # afterwards it will check again if the previous rerolls (if any) did not&amp;#10;        # lead to identical triplet across conditions (since inBothMath is&amp;#10;        # still True).&amp;#10;        &amp;#10;    # if no identical triplet across conditions, exit the loop&amp;#10;    #else:&amp;#10;            #inBothMat = False&amp;#10;&amp;#10;&amp;#10;# once the stimulus set is done, insert the trial ID next to the triplet&amp;#10;out_matrix_control = np.insert(out_matrix_control, 0, nTrials_vector, axis = 1)&amp;#10;# insert labels of columns for PsychoPy to read conditions&amp;#10;out_matrix_control_4xlsx = np.vstack((labels_colomn, out_matrix_control))&amp;#10;&amp;#10;# after vstack, the format of the triplets is not the one we want. It is a&amp;#10;# 1 decimal string. We have to convert it in 0 decimal int.&amp;#10;col = np.arange(nDigits+1)&amp;#10;row = np.arange(nTrials+1)&amp;#10;row = row [1:] # get rid of the first row since there are char strings&amp;#10;for x in row:&amp;#10;    for i in col:&amp;#10;        out_matrix_control_4xlsx[x,i] = round(float(out_matrix_control_4xlsx[x,i]))&amp;#10;&amp;#10;# Preparing Excel files&amp;#10;workbook = xlsxwriter.Workbook('Stimuli_ctrl_cond.xlsx')&amp;#10;worksheet = workbook.add_worksheet()&amp;#10;# Start from the first cell. Rows and columns are zero indexed.&amp;#10;row = 0&amp;#10;col = 0&amp;#10;# Iterate over the data and write it out row by row.&amp;#10;for ID_trial, digit1, digit2, digit3 in (out_matrix_control_4xlsx):&amp;#10;    worksheet.write(row, col, ID_trial)&amp;#10;    worksheet.write(row, col + 1, digit1)&amp;#10;    worksheet.write(row, col + 2, digit2)&amp;#10;    worksheet.write(row, col + 3, digit3)&amp;#10;    row += 1&amp;#10;&amp;#10;workbook.close()" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# This chunk of code defines the order in which the tasks (NV speech vs SiN) will&amp;#10;# be presented. If the current trial is a NV or SiN is randomized. However,&amp;#10;# it should not have more than 3 identical tasks in consecutive order&amp;#10;# (NV, NV, NV, NV, SiN is not allowed: NV has to come max. 3 times in a row).&amp;#10;n_max_consecutive = 3 # Number of consecutive equal elements allowed&amp;#10;nTrials_half = round(nTrials / 2) # It is actually equal to the nTrials_1Block variable&amp;#10;&amp;#10;# Create a nTrial long vector of 0 and 1 (half of the elements are 0, the other&amp;#10;# half 1) and shuffle the order of the elements to have a random order of presentation.&amp;#10;# 0: NV speech trial&amp;#10;# 1: SiN trial&amp;#10;tasks = np.ones(nTrials)&amp;#10;tasks[:nTrials_half] = 0&amp;#10;np.random.shuffle(tasks)&amp;#10;&amp;#10;# Gather the elems present more than 3 times in a row in a separate vector and delete them&amp;#10;# from the initial vector.&amp;#10;tasks_grouped = [list(g) for k, g in groupby(tasks)] # group the elements together&amp;#10;consecutive = []&amp;#10;consecutive_vector = []&amp;#10;for i in tasks_grouped:&amp;#10;    if len(i) &gt; n_max_consecutive:&amp;#10;        # select the consecutive elements which are above 3 times in a row&amp;#10;        consecutive = i[n_max_consecutive:]&amp;#10;        # gather the consecutive elements which are above 3 times in a row in a&amp;#10;        # separate vector&amp;#10;        consecutive_vector.append(consecutive)&amp;#10;        # delete them from the intial vector&amp;#10;        del i[n_max_consecutive:] &amp;#10;&amp;#10;# Take the initial vector and check where to put the removed elements back in order&amp;#10;# to respect the &quot;max X times in a row&quot; condition.&amp;#10;index = 0&amp;#10;for i in tasks_grouped:&amp;#10;    if not consecutive_vector: # this condition is necessary for the last iteration.&amp;#10;        break&amp;#10;    # The length of the current consecutive elems as well as the length of the&amp;#10;    # next group of consecutive elems should not be equal to 3. This is needed to know&amp;#10;    # where we are allowed to put the removed elems back.&amp;#10;    print(len(tasks_grouped))&amp;#10;    print([index+1])&amp;#10;    if len(i) &lt; n_max_consecutive and len(tasks_grouped[index]) &lt; n_max_consecutive: &amp;#10;        # This condition is needed to put the 1 together and the 0 together to&amp;#10;        # keep the list grouped (e.g. [0,0,0], [1,1]...)&amp;#10;        if consecutive_vector[0][0] == tasks_grouped[index][0]:&amp;#10;            # place the elem back in the initial vector&amp;#10;            tasks_grouped[index].insert(0, consecutive_vector[0][0])&amp;#10;            # since the elem is back in the initial vector, delete it from the other vector&amp;#10;            del consecutive_vector[0][0] &amp;#10;        elif consecutive_vector[0][0] == tasks_grouped[index+1][0]:&amp;#10;            tasks_grouped[index+1].insert(0, consecutive_vector[0][0])&amp;#10;            del consecutive_vector[0][0]&amp;#10;    &amp;#10;    # if no elems in the sublist anymore, delete the current sublist&amp;#10;    if len(consecutive_vector[0]) == 0:&amp;#10;        del consecutive_vector[0]&amp;#10;    index += 1&amp;#10;&amp;#10;# get the list as a vector&amp;#10;tasks_grouped_list = [item for sublist in tasks_grouped for item in sublist] # listed list as a list&amp;#10;order_task_trial = np.asarray(tasks_grouped_list) # list as vector&amp;#10;sys.stdout = StimOrder_file # open file for saving order of stimulation&amp;#10;print(order_task_trial)&amp;#10;sys.stdout = sys.__stdout__ # close file&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_5" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Break">
      <CodeComponent name="code_6">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# Instructions of the experiment. Subject presses enter to continue&amp;#10;&amp;#10;# set EEG marker for instructions experiment&amp;#10;if use_lpt:&amp;#10;    port.setData(102)&amp;#10;&amp;#10;begin_expBlock = []" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="# Get the pressed key of the subject&amp;#10;begin_expBlock = event.getKeys(keyList=['return'])&amp;#10;&amp;#10;# Begin experiment once the subject pressed enter&amp;#10;if &quot;return&quot; in begin_expBlock:&amp;#10;    # if enter is pressed, the current routine stops and we move into the next one&amp;#10;    continueRoutine = False " valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# Start playing background noise&amp;#10;# ELSAS code sound_noise, fs = sf.read('constantNoise_1minute_16kHz_filtered_mono_looped.wav', dtype='float32')  &amp;#10;#sound_noise.play()" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_6" valType="code"/>
      </CodeComponent>
      <TextComponent name="Begin">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="Begin" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Nun wird der erste Block starten. Insgesamt gibt es 4 Blöcke.&amp;#10;&amp;#10;Wie bei der Trainingsübung wirst Du zuerst ein kontinuierliches Geräusch hören und gleichzeitig ein Fixationskreuz sehen. Bitte das Kreuz fixieren. Solange das Kreuz sichtbar ist, bewege Dich bitte auch nicht.&amp;#10;&amp;#10;Nachher wirst du 3 Ziffern hören, die unterschiedlich verrauscht sind. Deine Aufgabe ist es, die Ziffern einzutippen, die du gehört hast.&amp;#10;&amp;#10;Sobald du bereit bist, um den ersten Block zu starten, kannst du auf &quot;Enter &quot; drücken.&amp;#10;" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="Test">
      <CodeComponent name="code_9">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="print('indiv factor = ', indiv_factor)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_9" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="Exclude">
      <TextComponent name="text_3">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="text_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="5.0" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$indiv_factor" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="Testing_Background_Noise">
      <CodeComponent name="code_10">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# This routine is part of the practice trials and is meant to determine the&amp;#10;# volume of the background noise (ask the participant if too loud / too low)&amp;#10;&amp;#10;# set EEG marker for testing the background noise&amp;#10;if use_lpt:&amp;#10;    port.setData(90)&amp;#10;&amp;#10;# Start playing background noise&amp;#10;# ELSAS code: sd.play(sound_noise, fs, loop=True)&amp;#10;&amp;#10;sound_noise.play()" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# Stop the background noise&amp;#10;sound_noise.stop()" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_10" valType="code"/>
      </CodeComponent>
      <TextComponent name="Fixation_cross_Test">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.2" valType="code"/>
        <Param name="name" updates="None" val="Fixation_cross_Test" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="+" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="clear_digits">
      <CodeComponent name="code_11">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="import {randint} from 'random';&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="# This routine is playing 10 trials of clear digit triplets. This is meant&amp;#10;# for the subjects to learn how to type their response. The stimulus set is&amp;#10;# fixed (always the same triplets in the same order) and can be found in &amp;#10;# the excel-file &quot;practice_trials.xlsx&quot;&amp;#10;&amp;#10;#default variables&amp;#10;firstdigit = 0&amp;#10;seconddigit = 0&amp;#10;thirddigit = 0&amp;#10;&amp;#10;speaker = [1,7,10,13,14,21,33,48,49,61]&amp;#10;digit1 = 'Speaker1_Digit0_48kHz_filtered_mono.wav'&amp;#10;digit2 = 'Speaker1_Digit0_48kHz_filtered_mono.wav'&amp;#10;digit3 = 'Speaker1_Digit0_48kHz_filtered_mono.wav'&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="counter = 0;&amp;#10;digits = [0];&amp;#10;firstdigit = 0;&amp;#10;seconddigit = 0;&amp;#10;thirddigit = 0;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="counter += 1;&amp;#10;firstdigit = NFB_digit1;&amp;#10;seconddigit = NFB_digit2;&amp;#10;thirddigit = NFB_digit3;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# Randomly choose one speaker for the current trial&amp;#10;rand_speaker = (np.random.choice(speaker, size = 1))&amp;#10;rand_speaker = int(rand_speaker[0])&amp;#10;#print(rand_speaker)&amp;#10;&amp;#10;# Reading the current digits from xlsx file&amp;#10;firstdigit = int(NFB_digit1)&amp;#10;seconddigit = int(NFB_digit2)&amp;#10;thirddigit = int(NFB_digit3)&amp;#10;&amp;#10;# Playing the first digit&amp;#10;if firstdigit &lt; 8:&amp;#10;    digit1 = 'Speaker'+str(rand_speaker)+'_Digit'+str(firstdigit)+'_48kHz_filtered_mono.wav'&amp;#10;else: # here we have to change the index since there is no 7 in the stimuli&amp;#10;    digit1 = 'Speaker'+str(rand_speaker)+'_Digit'+str(firstdigit)+'_48kHz_filtered_mono.wav'&amp;#10;&amp;#10;# Playing the second digit&amp;#10;if seconddigit &lt; 8:&amp;#10;    digit2 = 'Speaker'+str(rand_speaker)+'_Digit'+str(seconddigit)+'_48kHz_filtered_mono.wav'&amp;#10;else: # here we have to change the index since there is no 7 in the stimuli&amp;#10;    digit2 = 'Speaker'+str(rand_speaker)+'_Digit'+str(seconddigit)+'_48kHz_filtered_mono.wav'&amp;#10;&amp;#10;# Playing the third digit&amp;#10;if thirddigit &lt; 8:&amp;#10;    digit3 = 'Speaker'+str(rand_speaker)+'_Digit'+str(thirddigit)+'_48kHz_filtered_mono.wav'&amp;#10;else: # here we have to change the index since there is no 7 in the stimuli&amp;#10;   digit3 = 'Speaker'+str(rand_speaker)+'_Digit'+str(thirddigit)+'_48kHz_filtered_mono.wav'" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="# set EEG marker bei each digit onset&amp;#10;if use_lpt:&amp;#10;    if Digit1_clear.status == STARTED:&amp;#10;        port.setData(10)&amp;#10;    elif Digit2_clear.status == STARTED:&amp;#10;        port.setData(20)&amp;#10;    elif Digit3_clear.status == STARTED:&amp;#10;        port.setData(30)" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="/* Syntax Error: Fix Python code */" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_11" valType="code"/>
      </CodeComponent>
      <SoundComponent name="Digit1_clear">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="hamming" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Digit1_clear" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="sound" updates="set every repeat" val="$digit1" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="constant" val="False" valType="bool"/>
        <Param name="volume" updates="constant" val="1" valType="code"/>
      </SoundComponent>
      <SoundComponent name="Digit2_clear">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="hamming" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Digit2_clear" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="sound" updates="set every repeat" val="$digit2" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="condition" valType="str"/>
        <Param name="startVal" updates="None" val="$Digit1_clear.status == FINISHED" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="constant" val="False" valType="bool"/>
        <Param name="volume" updates="constant" val="1" valType="code"/>
      </SoundComponent>
      <SoundComponent name="Digit3_clear">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="hamming" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Digit3_clear" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="sound" updates="set every repeat" val="$digit3" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="condition" valType="str"/>
        <Param name="startVal" updates="None" val="$Digit2_clear.status == FINISHED" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="constant" val="False" valType="bool"/>
        <Param name="volume" updates="constant" val="1" valType="code"/>
      </SoundComponent>
    </Routine>
    <Routine name="Response_practice">
      <CodeComponent name="code_resp_keys_2">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# In this routine, the reponse of the subject are saved.&amp;#10;# The subjects have to type the 3 digits separately (one per screen) and confirm&amp;#10;# their end choice by pressing enter: digit 1 - ENTER - digit 2 - ENTER - digit 3 - ENTER&amp;#10;# Output: Excel file in the data folder of PsychoPy. Note that every key pressed&amp;#10;# are saved in this output file. The actual response of the subject is the reponse&amp;#10;# just before the &quot;enter&quot; keypress&amp;#10;&amp;#10;response = ''&amp;#10;theseKeys3 = []&amp;#10;keyPress = []&amp;#10;response_string = []" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="# Collect every pressed key&amp;#10;#keyPress = event.getKeys(keyList=['1','2','3','4','5','6','8','9','0', 'return'])&amp;#10;keyPress = event.getKeys(keyList=['num_1','num_2','num_3','num_4','num_5','num_6', 'num_7', 'num_8','num_9','num_0', 'return'])&amp;#10;&amp;#10;# Gather the pressed key in a string vector&amp;#10;response_string = &quot;&quot;.join(key_resp_3.keys).replace('num_', '')&amp;#10;#response_string = &quot;&quot;.join(key_resp_test.keys)&amp;#10;&amp;#10;if response_string: # if response_string is not empty:&amp;#10;    # only disp the last pressed key to enable the subjects to do corrections &amp;#10;    # (their final response is the last keypress before &quot;enter&quot;)&amp;#10;    response = response_string[-1] &amp;#10;&amp;#10;response_text = &quot;Gehörte Ziffer: {}&quot;.format(response)&amp;#10;&amp;#10;if &quot;return&quot; in keyPress: # if &quot;enter&quot; key pressed&amp;#10;    continueRoutine = False # pass to the next iteration (digit)&amp;#10;&amp;#10;&amp;#10;        &amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# set EEG marker after each digit response &amp;#10;if use_lpt:&amp;#10;    if response_practice.thisN == 0:&amp;#10;        port.setData(40)&amp;#10;    elif response_practice.thisN == 1:&amp;#10;        port.setData(50)&amp;#10;    elif response_practice.thisN == 2:&amp;#10;        port.setData(60)&amp;#10;&amp;#10;&amp;#10;#print(response_practice.thisN)" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_resp_keys_2" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="key_resp_3">
        <Param name="allowedKeys" updates="constant" val="'num_0','num_1', 'num_2', 'num_3', 'num_4', 'num_5', 'num_6', 'num_7', 'num_8', 'num_9', 'return'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_3" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="all keys" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="disp_answer_3">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="disp_answer_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every frame" val="$response_text" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="Instruction_start_Experiment">
      <CodeComponent name="code_14">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# This is the instruction explaining that we will gather some neural data for a&amp;#10;# period of time and that the person has the stay quiet. Subject press &quot;enter&amp;#10;# to continue.&amp;#10;&amp;#10;begin_exp = []&amp;#10;&amp;#10;# set EEG marker for instruction calibration&amp;#10;if use_lpt:&amp;#10;    port.setData(101)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="# Get the pressed key of the subject&amp;#10;begin_exp = event.getKeys(keyList=['return'])&amp;#10;&amp;#10;# Begin experiment once the subject pressed enter&amp;#10;if &quot;return&quot; in begin_exp:&amp;#10;    # if enter is pressed, the current routine stops and we move into the next one&amp;#10;    continueRoutine = False" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_14" valType="code"/>
      </CodeComponent>
      <TextComponent name="Instructions_begin">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="Instructions_begin" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Bevor das Experiment startet, wird Deine spontane Gehirnaktivität gemessen, während Du ein kontinuierliches Geräusch hören wirst.&amp;#10;&amp;#10;Du wirst ein Fixationskreuz sehen, das Du fixieren sollst. Bewege Dich bitte nicht, solange Du das Fixationskreuz siehst.&amp;#10;&amp;#10;Wenn Du bereit bist, kannst Du auf &quot;Enter&quot; drücken.&amp;#10;&amp;#10;" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="Instructions_practice">
      <CodeComponent name="code_12">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# This is the text welcoming the subjects to the experiment.&amp;#10;# Once they read the text, they can press enter to continue.&amp;#10;&amp;#10;# set EEG marker for instruction practice block&amp;#10;if use_lpt:&amp;#10;    port.setData(100)&amp;#10;&amp;#10;begin_exp = []&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="# Get the pressed key of the subject&amp;#10;begin_exp = event.getKeys(keyList=['return'])&amp;#10;&amp;#10;# Begin experiment once the subject pressed enter&amp;#10;if &quot;return&quot; in begin_exp:&amp;#10;    # if enter is pressed, the current routine stops and we move into the next one&amp;#10;    continueRoutine = False" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_12" valType="code"/>
      </CodeComponent>
      <TextComponent name="Instructions_clear_Digits">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.03" valType="code"/>
        <Param name="name" updates="None" val="Instructions_clear_Digits" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="In Kürze wirst Du mehrere Wörter hören, es werden immer 3 Ziffern nacheinander abgespielt werden, mehrmals hintereinander.&amp;#10;&amp;#10;Nachdem Du eine solche Dreier-Reihe gehört hast, kannst du die entsprechenden 3 Ziffern mit der Tastatur einzeln eintippen, die Du gehört hast. Du musst jedes Mal auf &quot;Enter&quot; drücken, um eine Ziffer zu bestätigen.&amp;#10;&amp;#10;Beispiel: Du hast “1”,”2”,”3” gehört, dann tippe ein: “1”, gefolgt von “ENTER”, “2” --&gt; ENTER, “3” --&gt; ENTER.&amp;#10;&amp;#10;Falls du während des Tippens einen Tippfehler machst, kannst du einfach eine neue Ziffer eintippen. Nur die letzte Eingabe zählt!&amp;#10;&amp;#10;Sobald du bereit bist, kannst du auf &quot;Enter&quot; drücken und die Trainingsphase wird anfangen.&amp;#10;" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="Welcome">
      <CodeComponent name="code_8">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# This is the text welcoming the subjects to the experiment.&amp;#10;# Once they read the text, they can press enter to continue.&amp;#10;begin_exp = []&amp;#10;# set EEG marker for displaying welcome text&amp;#10;if use_lpt:&amp;#10;    port.setData(109)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Both" valType="str"/>
        <Param name="Each Frame" updates="constant" val="# Get the pressed key of the subject&amp;#10;begin_exp = event.getKeys(keyList=['return'])&amp;#10;&amp;#10;# Begin experiment once the subject pressed enter&amp;#10;if &quot;return&quot; in begin_exp:&amp;#10;    # if enter is pressed, the current routine stops and we move into the next one&amp;#10;    continueRoutine = False" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_8" valType="code"/>
      </CodeComponent>
      <TextComponent name="Instructions_Noise">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.03" valType="code"/>
        <Param name="name" updates="None" val="Instructions_Noise" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Lieber Teilnehmer, willkommen zu unserem Experiment!&amp;#10;&amp;#10;Vielen Dank für Deine Teilnahme. In diesem Experiment geht es darum, die Rolle neuronaler Oszillationen beim Sprachverstehen zu erforschen. Du wirst eine Reihe von Sprachstimuli – Ziffern – hören, die eingebettet sein werden in Rauschen, bzw. verzerrt dargestellt werden.&amp;#10;&amp;#10;Bevor das eigentliche Experiment beginnt, wirst Du ein kontinuierliches Rauschen hören. Während des Abspielens des Geräuschs kannst du dem Versuchsleiter sagen, welche Lautstärke dir am besten passt.&amp;#10;&amp;#10;Wenn du bereit bist, kannst du auf &quot;Enter&quot; drücken und das Geräusch wird starten.&amp;#10;&amp;#10;" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="Next_Block">
      <CodeComponent name="code_13">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# At the end of the first block, there is a text saying that there is a break.&amp;#10;# at the end of the second block, there is a text saying that there is a break&amp;#10;# and that the experimentator will come to the room.&amp;#10;# The subject can press &quot;enter&quot; whenever he is ready to go on&amp;#10;&amp;#10;begin_ExpBlock = []&amp;#10;&amp;#10;# changing / displaying the instruction depending on the current block finished&amp;#10;instructions_next_block = ' '&amp;#10;# if it is the last trial of the first block&amp;#10;if nExpBlock == 1 and nExpTrials == (nTrials_half-1):&amp;#10;    sound_noise.stop() # Stop the background noise&amp;#10;    instructions_next_block = '''Du hast den ersten Block geschafft, Glückwunsch! Du kannst Dich kurz entspannen, wenn nötig.&amp;#10;    &amp;#10;    Sobald Du bereit bist, um den nächsten Block zu starten, kannst Du auf &quot;Enter&quot; drücken.&amp;#10;    &amp;#10;    Weiterhin gilt: Solange das Fixationskreuz sichtbar ist, bewege Dich bitte nicht.'''&amp;#10;# if it is the last trial of the second block&amp;#10;elif nExpBlock == 2 and nExpTrials == (nTrials-1):&amp;#10;    sound_noise.stop() # Stop the background noise&amp;#10;    instructions_next_block = '''Du hast den zweiten Block geschafft, Glückwunsch!&amp;#10;    &amp;#10;    Nun gibt es eine kleine Pause. Der/die VersuchsleiterIn wird in Kürze in den Raum kommen.'''&amp;#10;    #print(signal_trials)&amp;#10;# if other trial&amp;#10;else:&amp;#10;    continueRoutine = False" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="# Get the pressed key of the subject&amp;#10;begin_ExpBlock = event.getKeys(keyList=['return'])&amp;#10;&amp;#10;# Begin experiment once the subject pressed enter&amp;#10;if &quot;return&quot; in begin_ExpBlock:&amp;#10;    continueRoutine = False # wait for the subject to press the key &quot;enter&quot;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# set EEG marker for each instruction (after 1st and 2nd block are finished) &amp;#10;if use_lpt:&amp;#10;    if nExpTrials == (nTrials_half-1):&amp;#10;        port.setData(212)&amp;#10;    elif nExpTrials == (nTrials-1):&amp;#10;        port.setData(222)&amp;#10;    &amp;#10;# Start playing background noise&amp;#10;sound_noise.play()&amp;#10;&amp;#10;#print(signal_trials)&amp;#10;&amp;#10;# Update Trial counter&amp;#10;nExpTrials += 1&amp;#10;if nExpTrials == nTrials_half:&amp;#10;    nExpBlock += 1" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_13" valType="code"/>
      </CodeComponent>
      <TextComponent name="Begin_3">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="Begin_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$instructions_next_block" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="Next_Block_2">
      <CodeComponent name="code_15">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# At the end of the third block, there is a text saying that there is a break.&amp;#10;# at the end of the fourth block, there is a text saying that the experiment is finished&amp;#10;# The subject can press &quot;enter&quot; whenever he is ready to go on&amp;#10;&amp;#10;begin_Controlblock = []&amp;#10;&amp;#10;# changing / displaying the instruction depending on the current block finishe&amp;#10;instructions_next_block = ' '&amp;#10;# if it is the last trial of the first block&amp;#10;if nCtrlBlock == 1 and nCtrlTrials == (nTrials_half-1):&amp;#10;    sound_noise.stop() # Stop the background noise&amp;#10;    instructions_next_block = '''Du hast den dritten Block geschafft, Glückwunsch! &amp;#10;    &amp;#10;    Sobald Du bereit bist, um den nächsten Block zu starten, kannst Du auf &quot;Enter&quot; drücken.&amp;#10;    &amp;#10;    Weiterhin gilt: Während das Fixationskreuz sichtbar ist, bewege Dich bitte nicht.'''&amp;#10;    &amp;#10;# if it is the last trial of the second block&amp;#10;elif nCtrlBlock == 2 and nCtrlTrials == (nTrials-1):&amp;#10;    sound_noise.stop() # Stop the background noise&amp;#10;    instructions_next_block = '''Das Experiment ist nun zu Ende. Vielen Dank für Deine Teilnahme!'''&amp;#10;    #print(signal_trials)&amp;#10;# if other trial&amp;#10;else:&amp;#10;    continueRoutine = False" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="# Get the pressed key of the subject&amp;#10;begin_Controlblock = event.getKeys(keyList=['return'])&amp;#10;&amp;#10;# Begin experiment once the subject pressed enter&amp;#10;if &quot;return&quot; in begin_Controlblock:&amp;#10;    continueRoutine = False # wait for the subject to press the key &quot;enter&quot;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# set EEG marker for each instruction (after 1st and 2nd block are finished) &amp;#10;if use_lpt:&amp;#10;    if nCtrlTrials == (nTrials_half-1):&amp;#10;        port.setData(233)&amp;#10;    elif nCtrlTrials == (nTrials-1):&amp;#10;        port.setData(243)&amp;#10;&amp;#10;#print(signal_trials)&amp;#10;&amp;#10;# Update Trial counter&amp;#10;nCtrlTrials += 1&amp;#10;if nCtrlTrials == nTrials_half:&amp;#10;    nCtrlBlock += 1&amp;#10;    &amp;#10;    &amp;#10;# Start playing background noise&amp;#10;if nCtrlBlock &lt; 2:&amp;#10;    sound_noise.play()&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_15" valType="code"/>
      </CodeComponent>
      <TextComponent name="Begin_4">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="Begin_4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$instructions_next_block" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="Questions">
      <CodeComponent name="code_7">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="questions = []" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="# Get the pressed key of the subject&amp;#10;questions = event.getKeys(keyList=['n','y'])&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# choose if yes or no we replay the practice&amp;#10;# Begin experiment once the subject pressed enter&amp;#10;if &quot;n&quot; in questions:&amp;#10;    # if no question, we start the experiment&amp;#10;    practice_block.finished = True&amp;#10;elif &quot;y&quot; in questions:&amp;#10;    # if there are question, repeat the practice block&amp;#10;    #rep_practice += 1&amp;#10;    continueRoutine = False" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_7" valType="code"/>
      </CodeComponent>
      <TextComponent name="text">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Wenn du Fragen hast, kannst du es nun den / die VersuchsleiterIn fragen.&amp;#10;&amp;#10;Möchtest du die Trainingübung wiederholen ? [y/n]&amp;#10;" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="repeat_practice">
      <CodeComponent name="code_16">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# It asks if we want to repeat the practice block. This is in case the subject&amp;#10;# did not understand either the task or the way to provide his answer (or both).&amp;#10;# ...Start the practice block again: press &quot;y&quot; (you have 20 seconds to press &quot;y&quot;. If&amp;#10;# you don't, the experiment will go on)&amp;#10;# ...Don't retart it: just wait and the experiment will go on&amp;#10;&amp;#10;if key_resp_4.keys == 'j':&amp;#10;    practice_block.finished=0&amp;#10;    continueRoutine = True &amp;#10;elif key_resp_4.keys == 'n':&amp;#10;    practice_block.finished=1&amp;#10;    practice_trials.finished=1&amp;#10;    continueRoutine = False&amp;#10;else:&amp;#10;    practice_block.finished=1&amp;#10;    practice_trials.finished=1&amp;#10;    continueRoutine = False&amp;#10;    &amp;#10;        &amp;#10;        " valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_16" valType="code"/>
      </CodeComponent>
      <TextComponent name="text_4">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text_4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="10" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Training wiederholen ? [j/n] Bei keiner Antwort geht das Experiment in 10 Sekunden weiter." valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_4">
        <Param name="allowedKeys" updates="constant" val="'j','n'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_4" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="5" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="repeat_calibration">
      <CodeComponent name="code_17">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# It asks if we want to repeat the calibration. This is in case one of the&amp;#10;# following criteria is not fulfilled (check the stdout of PsychoPy):&amp;#10;#...Mean should NOT be around 0 (most of the values are around 2-4)&amp;#10;#...Std should be acceptable compared to the mean (e.g. by a mean of 3.58, 3 is acceptable, 18 is not)&amp;#10;#...The indiv factor should be at least 2&amp;#10;# Here is what to do to restart the calibration:&amp;#10;# ...Start thecalibration again: press &quot;y&quot; (you have 20 seconds to press &quot;y&quot;. If&amp;#10;# you don't, the experiment will go on)&amp;#10;# ...Don't retart it: just wait and the experiment will go on&amp;#10;&amp;#10;if key_resp_5.keys:&amp;#10;    calibration_block.finished=0&amp;#10;    continueRoutine = True &amp;#10;else:&amp;#10;    calibration_block.finished=1&amp;#10;    #practice_trials.finished=1&amp;#10;    continueRoutine = False &amp;#10;        " valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_17" valType="code"/>
      </CodeComponent>
      <TextComponent name="text_5">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text_5" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="10" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Kalibrierung wiederholen [j/n]? Bei nein oder keiner Antwort geht das Experiment in 10 Sekunden weiter." valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_5">
        <Param name="allowedKeys" updates="constant" val="'y'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_5" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="5" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="Startup"/>
    <Routine name="Welcome"/>
    <Routine name="Testing_Background_Noise"/>
    <LoopInitiator loopType="TrialHandler" name="practice_block">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="100" valType="code"/>
      <Param name="name" updates="None" val="practice_block" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Instructions_practice"/>
    <LoopInitiator loopType="TrialHandler" name="practice_trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('TrialID', 0), ('NFB_digit1', 6), ('NFB_digit2', 2), ('NFB_digit3', 4)]), OrderedDict([('TrialID', 1), ('NFB_digit1', 1), ('NFB_digit2', 9), ('NFB_digit3', 3)]), OrderedDict([('TrialID', 2), ('NFB_digit1', 8), ('NFB_digit2', 0), ('NFB_digit3', 1)]), OrderedDict([('TrialID', 3), ('NFB_digit1', 9), ('NFB_digit2', 6), ('NFB_digit3', 1)]), OrderedDict([('TrialID', 4), ('NFB_digit1', 8), ('NFB_digit2', 1), ('NFB_digit3', 5)]), OrderedDict([('TrialID', 5), ('NFB_digit1', 4), ('NFB_digit2', 1), ('NFB_digit3', 0)]), OrderedDict([('TrialID', 6), ('NFB_digit1', 9), ('NFB_digit2', 2), ('NFB_digit3', 6)]), OrderedDict([('TrialID', 7), ('NFB_digit1', 2), ('NFB_digit2', 3), ('NFB_digit3', 0)]), OrderedDict([('TrialID', 8), ('NFB_digit1', 1), ('NFB_digit2', 9), ('NFB_digit3', 2)]), OrderedDict([('TrialID', 9), ('NFB_digit1', 8), ('NFB_digit2', 1), ('NFB_digit3', 0)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="practice_trials.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="practice_trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="clear_digits"/>
    <LoopInitiator loopType="TrialHandler" name="response_practice">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="nDigits" valType="code"/>
      <Param name="name" updates="None" val="response_practice" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Response_practice"/>
    <LoopTerminator name="response_practice"/>
    <LoopTerminator name="practice_trials"/>
    <Routine name="repeat_practice"/>
    <LoopTerminator name="practice_block"/>
    <LoopInitiator loopType="TrialHandler" name="calibration_block">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="100" valType="code"/>
      <Param name="name" updates="None" val="calibration_block" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Instruction_start_Experiment"/>
    <Routine name="Calibrating"/>
    <Routine name="repeat_calibration"/>
    <LoopTerminator name="calibration_block"/>
    <Routine name="Break"/>
    <LoopInitiator loopType="TrialHandler" name="experimental_block">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="experimental_block" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <LoopInitiator loopType="TrialHandler" name="exp_trials">
      <Param name="Selected rows" updates="None" val="$trial_nr" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('TrialID', 0), ('NFB_digit1', 5), ('NFB_digit2', 0), ('NFB_digit3', 4)]), OrderedDict([('TrialID', 1), ('NFB_digit1', 8), ('NFB_digit2', 4), ('NFB_digit3', 2)]), OrderedDict([('TrialID', 2), ('NFB_digit1', 6), ('NFB_digit2', 2), ('NFB_digit3', 0)]), OrderedDict([('TrialID', 3), ('NFB_digit1', 8), ('NFB_digit2', 0), ('NFB_digit3', 4)]), OrderedDict([('TrialID', 4), ('NFB_digit1', 9), ('NFB_digit2', 5), ('NFB_digit3', 1)]), OrderedDict([('TrialID', 5), ('NFB_digit1', 6), ('NFB_digit2', 2), ('NFB_digit3', 1)]), OrderedDict([('TrialID', 6), ('NFB_digit1', 0), ('NFB_digit2', 6), ('NFB_digit3', 2)]), OrderedDict([('TrialID', 7), ('NFB_digit1', 6), ('NFB_digit2', 0), ('NFB_digit3', 1)]), OrderedDict([('TrialID', 8), ('NFB_digit1', 4), ('NFB_digit2', 3), ('NFB_digit3', 8)]), OrderedDict([('TrialID', 9), ('NFB_digit1', 0), ('NFB_digit2', 3), ('NFB_digit3', 5)]), OrderedDict([('TrialID', 10), ('NFB_digit1', 6), ('NFB_digit2', 2), ('NFB_digit3', 9)]), OrderedDict([('TrialID', 11), ('NFB_digit1', 9), ('NFB_digit2', 2), ('NFB_digit3', 6)]), OrderedDict([('TrialID', 12), ('NFB_digit1', 6), ('NFB_digit2', 0), ('NFB_digit3', 3)]), OrderedDict([('TrialID', 13), ('NFB_digit1', 1), ('NFB_digit2', 9), ('NFB_digit3', 5)]), OrderedDict([('TrialID', 14), ('NFB_digit1', 8), ('NFB_digit2', 4), ('NFB_digit3', 3)]), OrderedDict([('TrialID', 15), ('NFB_digit1', 6), ('NFB_digit2', 2), ('NFB_digit3', 4)]), OrderedDict([('TrialID', 16), ('NFB_digit1', 3), ('NFB_digit2', 1), ('NFB_digit3', 0)]), OrderedDict([('TrialID', 17), ('NFB_digit1', 0), ('NFB_digit2', 8), ('NFB_digit3', 3)]), OrderedDict([('TrialID', 18), ('NFB_digit1', 9), ('NFB_digit2', 0), ('NFB_digit3', 1)]), OrderedDict([('TrialID', 19), ('NFB_digit1', 1), ('NFB_digit2', 9), ('NFB_digit3', 0)]), OrderedDict([('TrialID', 20), ('NFB_digit1', 5), ('NFB_digit2', 0), ('NFB_digit3', 9)]), OrderedDict([('TrialID', 21), ('NFB_digit1', 5), ('NFB_digit2', 8), ('NFB_digit3', 2)]), OrderedDict([('TrialID', 22), ('NFB_digit1', 5), ('NFB_digit2', 3), ('NFB_digit3', 0)]), OrderedDict([('TrialID', 23), ('NFB_digit1', 9), ('NFB_digit2', 3), ('NFB_digit3', 8)]), OrderedDict([('TrialID', 24), ('NFB_digit1', 3), ('NFB_digit2', 6), ('NFB_digit3', 1)]), OrderedDict([('TrialID', 25), ('NFB_digit1', 4), ('NFB_digit2', 2), ('NFB_digit3', 9)]), OrderedDict([('TrialID', 26), ('NFB_digit1', 9), ('NFB_digit2', 3), ('NFB_digit3', 4)]), OrderedDict([('TrialID', 27), ('NFB_digit1', 4), ('NFB_digit2', 9), ('NFB_digit3', 8)]), OrderedDict([('TrialID', 28), ('NFB_digit1', 8), ('NFB_digit2', 1), ('NFB_digit3', 4)]), OrderedDict([('TrialID', 29), ('NFB_digit1', 6), ('NFB_digit2', 5), ('NFB_digit3', 2)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Stimuli_exp_cond.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="exp_trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="signal_check"/>
    <Routine name="digits_played"/>
    <LoopInitiator loopType="TrialHandler" name="response_exp">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="nDigits" valType="code"/>
      <Param name="name" updates="None" val="response_exp" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Response_subjects"/>
    <LoopTerminator name="response_exp"/>
    <Routine name="Next_Block"/>
    <LoopTerminator name="exp_trials"/>
    <LoopTerminator name="experimental_block"/>
    <LoopInitiator loopType="TrialHandler" name="control_block">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="control_block" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <LoopInitiator loopType="TrialHandler" name="ctrl_trials">
      <Param name="Selected rows" updates="None" val="$trial_nr_ctrl" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('TrialID', 0), ('NFB_digit1', 2), ('NFB_digit2', 3), ('NFB_digit3', 9)]), OrderedDict([('TrialID', 1), ('NFB_digit1', 4), ('NFB_digit2', 8), ('NFB_digit3', 6)]), OrderedDict([('TrialID', 2), ('NFB_digit1', 8), ('NFB_digit2', 3), ('NFB_digit3', 9)]), OrderedDict([('TrialID', 3), ('NFB_digit1', 2), ('NFB_digit2', 1), ('NFB_digit3', 0)]), OrderedDict([('TrialID', 4), ('NFB_digit1', 5), ('NFB_digit2', 8), ('NFB_digit3', 3)]), OrderedDict([('TrialID', 5), ('NFB_digit1', 6), ('NFB_digit2', 9), ('NFB_digit3', 2)]), OrderedDict([('TrialID', 6), ('NFB_digit1', 9), ('NFB_digit2', 1), ('NFB_digit3', 0)]), OrderedDict([('TrialID', 7), ('NFB_digit1', 4), ('NFB_digit2', 2), ('NFB_digit3', 9)]), OrderedDict([('TrialID', 8), ('NFB_digit1', 2), ('NFB_digit2', 4), ('NFB_digit3', 5)]), OrderedDict([('TrialID', 9), ('NFB_digit1', 1), ('NFB_digit2', 2), ('NFB_digit3', 9)]), OrderedDict([('TrialID', 10), ('NFB_digit1', 2), ('NFB_digit2', 0), ('NFB_digit3', 3)]), OrderedDict([('TrialID', 11), ('NFB_digit1', 3), ('NFB_digit2', 5), ('NFB_digit3', 0)]), OrderedDict([('TrialID', 12), ('NFB_digit1', 2), ('NFB_digit2', 5), ('NFB_digit3', 0)]), OrderedDict([('TrialID', 13), ('NFB_digit1', 2), ('NFB_digit2', 0), ('NFB_digit3', 6)]), OrderedDict([('TrialID', 14), ('NFB_digit1', 3), ('NFB_digit2', 2), ('NFB_digit3', 4)]), OrderedDict([('TrialID', 15), ('NFB_digit1', 6), ('NFB_digit2', 4), ('NFB_digit3', 5)]), OrderedDict([('TrialID', 16), ('NFB_digit1', 2), ('NFB_digit2', 1), ('NFB_digit3', 5)]), OrderedDict([('TrialID', 17), ('NFB_digit1', 9), ('NFB_digit2', 4), ('NFB_digit3', 5)]), OrderedDict([('TrialID', 18), ('NFB_digit1', 2), ('NFB_digit2', 4), ('NFB_digit3', 8)]), OrderedDict([('TrialID', 19), ('NFB_digit1', 9), ('NFB_digit2', 4), ('NFB_digit3', 2)]), OrderedDict([('TrialID', 20), ('NFB_digit1', 8), ('NFB_digit2', 2), ('NFB_digit3', 5)]), OrderedDict([('TrialID', 21), ('NFB_digit1', 2), ('NFB_digit2', 8), ('NFB_digit3', 6)]), OrderedDict([('TrialID', 22), ('NFB_digit1', 0), ('NFB_digit2', 2), ('NFB_digit3', 1)]), OrderedDict([('TrialID', 23), ('NFB_digit1', 4), ('NFB_digit2', 5), ('NFB_digit3', 3)]), OrderedDict([('TrialID', 24), ('NFB_digit1', 3), ('NFB_digit2', 2), ('NFB_digit3', 0)]), OrderedDict([('TrialID', 25), ('NFB_digit1', 2), ('NFB_digit2', 6), ('NFB_digit3', 9)]), OrderedDict([('TrialID', 26), ('NFB_digit1', 5), ('NFB_digit2', 8), ('NFB_digit3', 6)]), OrderedDict([('TrialID', 27), ('NFB_digit1', 3), ('NFB_digit2', 0), ('NFB_digit3', 8)]), OrderedDict([('TrialID', 28), ('NFB_digit1', 0), ('NFB_digit2', 8), ('NFB_digit3', 1)]), OrderedDict([('TrialID', 29), ('NFB_digit1', 6), ('NFB_digit2', 8), ('NFB_digit3', 9)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="Stimuli_ctrl_cond.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="ctrl_trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="signal_check_2"/>
    <Routine name="digits_played_2"/>
    <LoopInitiator loopType="TrialHandler" name="response_ctrl">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="nDigits" valType="code"/>
      <Param name="name" updates="None" val="response_ctrl" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="Response_subjects_2"/>
    <LoopTerminator name="response_ctrl"/>
    <Routine name="Next_Block_2"/>
    <LoopTerminator name="ctrl_trials"/>
    <LoopTerminator name="control_block"/>
  </Flow>
</PsychoPy2experiment>
